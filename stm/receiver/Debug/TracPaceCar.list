
TracPaceCar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005488  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f08  08005f08  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005f08  08005f08  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f08  08005f08  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f0c  08005f0c  00015f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000084  08005f94  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e8  08005f94  000206e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ca5  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003926  00000000  00000000  00032d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00036678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  00037a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d455  00000000  00000000  00038c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d1e  00000000  00000000  00056075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c74  00000000  00000000  0006dd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103a07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  00103a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	0800557c 	.word	0x0800557c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	0800557c 	.word	0x0800557c

0800014c <Control_Init>:
#include "control.h"
#include "eeprom.h"
#include "display/display.hpp"

void Control_Init(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Memory_Init();
 8000150:	f000 f804 	bl	800015c <Memory_Init>
	Display_Init();
 8000154:	f000 f8c6 	bl	80002e4 <Display_Init>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <Memory_Init>:
};

static uint8_t var_addr[MEM_SIZE];
static uint16_t mem_buf[MEM_SIZE];

void Memory_Init(void) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
	const uint8_t size = sizeof(variables)/sizeof(struct Variable);
 8000162:	2301      	movs	r3, #1
 8000164:	71bb      	strb	r3, [r7, #6]
	for (uint8_t i = 0; i < size; i++) {
 8000166:	2300      	movs	r3, #0
 8000168:	71fb      	strb	r3, [r7, #7]
 800016a:	e00e      	b.n	800018a <Memory_Init+0x2e>
		var_addr[variables[i].name] = i;
 800016c:	79fa      	ldrb	r2, [r7, #7]
 800016e:	490e      	ldr	r1, [pc, #56]	; (80001a8 <Memory_Init+0x4c>)
 8000170:	4613      	mov	r3, r2
 8000172:	005b      	lsls	r3, r3, #1
 8000174:	4413      	add	r3, r2
 8000176:	005b      	lsls	r3, r3, #1
 8000178:	440b      	add	r3, r1
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	4619      	mov	r1, r3
 800017e:	4a0b      	ldr	r2, [pc, #44]	; (80001ac <Memory_Init+0x50>)
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	5453      	strb	r3, [r2, r1]
	for (uint8_t i = 0; i < size; i++) {
 8000184:	79fb      	ldrb	r3, [r7, #7]
 8000186:	3301      	adds	r3, #1
 8000188:	71fb      	strb	r3, [r7, #7]
 800018a:	79fa      	ldrb	r2, [r7, #7]
 800018c:	79bb      	ldrb	r3, [r7, #6]
 800018e:	429a      	cmp	r2, r3
 8000190:	d3ec      	bcc.n	800016c <Memory_Init+0x10>
	}

	eeprom_random_read(0, (uint8_t*)mem_buf, MEM_SIZE*2);
 8000192:	2200      	movs	r2, #0
 8000194:	4906      	ldr	r1, [pc, #24]	; (80001b0 <Memory_Init+0x54>)
 8000196:	2000      	movs	r0, #0
 8000198:	f000 fc86 	bl	8000aa8 <eeprom_random_read>
	Memory_Evaluate();
 800019c:	f000 f80a 	bl	80001b4 <Memory_Evaluate>
}
 80001a0:	bf00      	nop
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	200000a0 	.word	0x200000a0
 80001b0:	200000a0 	.word	0x200000a0

080001b4 <Memory_Evaluate>:

void Memory_Toggle(enum Address name) {
	Memory_Write(name, !mem_buf[name]);
}

void Memory_Evaluate(void) {
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0

}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <Input_GetState>:
#include <string.h>

static uint8_t btn_state[4] = {0};
static uint8_t btn_latch[4] = {0};

uint8_t Input_GetState(enum Button btn) {
 80001c0:	b480      	push	{r7}
 80001c2:	b085      	sub	sp, #20
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	71fb      	strb	r3, [r7, #7]
	const uint8_t val = btn_latch[btn];
 80001ca:	79fb      	ldrb	r3, [r7, #7]
 80001cc:	4a06      	ldr	r2, [pc, #24]	; (80001e8 <Input_GetState+0x28>)
 80001ce:	5cd3      	ldrb	r3, [r2, r3]
 80001d0:	73fb      	strb	r3, [r7, #15]
	btn_latch[btn] = 0;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <Input_GetState+0x28>)
 80001d6:	2100      	movs	r1, #0
 80001d8:	54d1      	strb	r1, [r2, r3]
	return val;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
}
 80001dc:	4618      	mov	r0, r3
 80001de:	3714      	adds	r7, #20
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	200000a4 	.word	0x200000a4

080001ec <Input_TimerHandler>:

void Input_TimerHandler(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0
	uint8_t btn_current[4];
	btn_current[0] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80001f2:	2104      	movs	r1, #4
 80001f4:	4822      	ldr	r0, [pc, #136]	; (8000280 <Input_TimerHandler+0x94>)
 80001f6:	f002 fa81 	bl	80026fc <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	703b      	strb	r3, [r7, #0]
	btn_current[1] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80001fe:	2101      	movs	r1, #1
 8000200:	481f      	ldr	r0, [pc, #124]	; (8000280 <Input_TimerHandler+0x94>)
 8000202:	f002 fa7b 	bl	80026fc <HAL_GPIO_ReadPin>
 8000206:	4603      	mov	r3, r0
 8000208:	707b      	strb	r3, [r7, #1]
	btn_current[2] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 800020a:	2102      	movs	r1, #2
 800020c:	481c      	ldr	r0, [pc, #112]	; (8000280 <Input_TimerHandler+0x94>)
 800020e:	f002 fa75 	bl	80026fc <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	70bb      	strb	r3, [r7, #2]
	btn_current[3] = HAL_GPIO_ReadPin(BTN4_GPIO_Port, BTN4_Pin);
 8000216:	2180      	movs	r1, #128	; 0x80
 8000218:	481a      	ldr	r0, [pc, #104]	; (8000284 <Input_TimerHandler+0x98>)
 800021a:	f002 fa6f 	bl	80026fc <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	70fb      	strb	r3, [r7, #3]

	for (uint8_t i = 0; i < 4; i++) {
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]
 8000226:	e022      	b.n	800026e <Input_TimerHandler+0x82>
		btn_latch[i] = btn_latch[i] || (!btn_current[i] && btn_state[i]);
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <Input_TimerHandler+0x9c>)
 800022c:	5cd3      	ldrb	r3, [r2, r3]
 800022e:	2b00      	cmp	r3, #0
 8000230:	d10b      	bne.n	800024a <Input_TimerHandler+0x5e>
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	3308      	adds	r3, #8
 8000236:	443b      	add	r3, r7
 8000238:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d106      	bne.n	800024e <Input_TimerHandler+0x62>
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a12      	ldr	r2, [pc, #72]	; (800028c <Input_TimerHandler+0xa0>)
 8000244:	5cd3      	ldrb	r3, [r2, r3]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <Input_TimerHandler+0x62>
 800024a:	2201      	movs	r2, #1
 800024c:	e000      	b.n	8000250 <Input_TimerHandler+0x64>
 800024e:	2200      	movs	r2, #0
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	b2d1      	uxtb	r1, r2
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <Input_TimerHandler+0x9c>)
 8000256:	54d1      	strb	r1, [r2, r3]
		btn_state[i] = btn_current[i];
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3208      	adds	r2, #8
 800025e:	443a      	add	r2, r7
 8000260:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8000264:	4a09      	ldr	r2, [pc, #36]	; (800028c <Input_TimerHandler+0xa0>)
 8000266:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 4; i++) {
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	3301      	adds	r3, #1
 800026c:	71fb      	strb	r3, [r7, #7]
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	2b03      	cmp	r3, #3
 8000272:	d9d9      	bls.n	8000228 <Input_TimerHandler+0x3c>
	}
}
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40010800 	.word	0x40010800
 8000288:	200000a4 	.word	0x200000a4
 800028c:	200000a0 	.word	0x200000a0

08000290 <Signal_TestSteering>:

void Signal_TimerHandler(void) {

}

void Signal_TestSteering(void) {
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <Signal_TestMotor>:

void Signal_TestMotor(void) {
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0

}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <_ZL17display_init_pagev>:
#include "main.h"

static Screen *page_stack[DISPLAY_MAX_STACK];
static uint8_t stack_depth = 0;

static void display_init_page(void) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 80002ac:	2000      	movs	r0, #0
 80002ae:	f000 fcb7 	bl	8000c20 <ssd1306_Fill>
	page_stack[stack_depth]->init();
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <_ZL17display_init_pagev+0x34>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <_ZL17display_init_pagev+0x38>)
 80002ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <_ZL17display_init_pagev+0x34>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	4619      	mov	r1, r3
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <_ZL17display_init_pagev+0x38>)
 80002c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3308      	adds	r3, #8
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4610      	mov	r0, r2
 80002d2:	4798      	blx	r3
	ssd1306_UpdateScreen();
 80002d4:	f000 fcc6 	bl	8000c64 <ssd1306_UpdateScreen>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200000b8 	.word	0x200000b8
 80002e0:	200000a8 	.word	0x200000a8

080002e4 <Display_Init>:
	}
	display_init_page();
}

extern "C" {
void Display_Init(void) {
 80002e4:	b598      	push	{r3, r4, r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	ssd1306_Init();
 80002e8:	f000 fc30 	bl	8000b4c <ssd1306_Init>
	page_stack[stack_depth] = Screens_GetScreen(ScrnMenu);
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <Display_Init+0x24>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	461c      	mov	r4, r3
 80002f2:	2000      	movs	r0, #0
 80002f4:	f000 f80c 	bl	8000310 <_Z17Screens_GetScreen10ScreenName>
 80002f8:	4603      	mov	r3, r0
 80002fa:	4a04      	ldr	r2, [pc, #16]	; (800030c <Display_Init+0x28>)
 80002fc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	display_init_page();
 8000300:	f7ff ffd2 	bl	80002a8 <_ZL17display_init_pagev>
}
 8000304:	bf00      	nop
 8000306:	bd98      	pop	{r3, r4, r7, pc}
 8000308:	200000b8 	.word	0x200000b8
 800030c:	200000a8 	.word	0x200000a8

08000310 <_Z17Screens_GetScreen10ScreenName>:
#include "signal.h"
#include "eeprom.h"
#include "bitmaps.h"
#include <stdio.h>

Screen* Screens_GetScreen(enum ScreenName name) {
 8000310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000314:	b082      	sub	sp, #8
 8000316:	af00      	add	r7, sp, #0
 8000318:	4603      	mov	r3, r0
 800031a:	71fb      	strb	r3, [r7, #7]
    if (name == ScrnMenu) {
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d13f      	bne.n	80003a2 <_Z17Screens_GetScreen10ScreenName+0x92>
        return new Scroll(new Image(bm_logo, 128, 16),
 8000322:	200c      	movs	r0, #12
 8000324:	f004 ff67 	bl	80051f6 <_Znwj>
 8000328:	4603      	mov	r3, r0
 800032a:	461e      	mov	r6, r3
 800032c:	2310      	movs	r3, #16
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	491f      	ldr	r1, [pc, #124]	; (80003b0 <_Z17Screens_GetScreen10ScreenName+0xa0>)
 8000332:	4630      	mov	r0, r6
 8000334:	f000 fb50 	bl	80009d8 <_ZN5ImageC1EPKhhh>
            new Option*[3] {
                new Action("Test Steering", &Signal_TestSteering),
                new Action("Test Motor", &Signal_TestMotor),
                new Action("Blah Blah", &Signal_TestMotor)
            }, 3);
 8000338:	200c      	movs	r0, #12
 800033a:	f004 ff6d 	bl	8005218 <_Znaj>
 800033e:	4603      	mov	r3, r0
 8000340:	4698      	mov	r8, r3
 8000342:	4644      	mov	r4, r8
                new Action("Test Steering", &Signal_TestSteering),
 8000344:	200c      	movs	r0, #12
 8000346:	f004 ff56 	bl	80051f6 <_Znwj>
 800034a:	4603      	mov	r3, r0
 800034c:	461d      	mov	r5, r3
 800034e:	4a19      	ldr	r2, [pc, #100]	; (80003b4 <_Z17Screens_GetScreen10ScreenName+0xa4>)
 8000350:	4919      	ldr	r1, [pc, #100]	; (80003b8 <_Z17Screens_GetScreen10ScreenName+0xa8>)
 8000352:	4628      	mov	r0, r5
 8000354:	f000 f838 	bl	80003c8 <_ZN6ActionC1EPKcPFvvE>
            }, 3);
 8000358:	6025      	str	r5, [r4, #0]
 800035a:	3404      	adds	r4, #4
                new Action("Test Motor", &Signal_TestMotor),
 800035c:	200c      	movs	r0, #12
 800035e:	f004 ff4a 	bl	80051f6 <_Znwj>
 8000362:	4603      	mov	r3, r0
 8000364:	461d      	mov	r5, r3
 8000366:	4a15      	ldr	r2, [pc, #84]	; (80003bc <_Z17Screens_GetScreen10ScreenName+0xac>)
 8000368:	4915      	ldr	r1, [pc, #84]	; (80003c0 <_Z17Screens_GetScreen10ScreenName+0xb0>)
 800036a:	4628      	mov	r0, r5
 800036c:	f000 f82c 	bl	80003c8 <_ZN6ActionC1EPKcPFvvE>
            }, 3);
 8000370:	6025      	str	r5, [r4, #0]
 8000372:	3404      	adds	r4, #4
                new Action("Blah Blah", &Signal_TestMotor)
 8000374:	200c      	movs	r0, #12
 8000376:	f004 ff3e 	bl	80051f6 <_Znwj>
 800037a:	4603      	mov	r3, r0
 800037c:	461d      	mov	r5, r3
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <_Z17Screens_GetScreen10ScreenName+0xac>)
 8000380:	4910      	ldr	r1, [pc, #64]	; (80003c4 <_Z17Screens_GetScreen10ScreenName+0xb4>)
 8000382:	4628      	mov	r0, r5
 8000384:	f000 f820 	bl	80003c8 <_ZN6ActionC1EPKcPFvvE>
            }, 3);
 8000388:	6025      	str	r5, [r4, #0]
 800038a:	2010      	movs	r0, #16
 800038c:	f004 ff33 	bl	80051f6 <_Znwj>
 8000390:	4603      	mov	r3, r0
 8000392:	461c      	mov	r4, r3
 8000394:	2303      	movs	r3, #3
 8000396:	4642      	mov	r2, r8
 8000398:	4631      	mov	r1, r6
 800039a:	4620      	mov	r0, r4
 800039c:	f000 f92c 	bl	80005f8 <_ZN6ScrollC1EP5TitlePP6Optionh>
 80003a0:	e000      	b.n	80003a4 <_Z17Screens_GetScreen10ScreenName+0x94>
    }
    return nullptr;
 80003a2:	2400      	movs	r4, #0
}
 80003a4:	4623      	mov	r3, r4
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80003b0:	080055c0 	.word	0x080055c0
 80003b4:	08000291 	.word	0x08000291
 80003b8:	08005594 	.word	0x08005594
 80003bc:	0800029d 	.word	0x0800029d
 80003c0:	080055a4 	.word	0x080055a4
 80003c4:	080055b0 	.word	0x080055b0

080003c8 <_ZN6ActionC1EPKcPFvvE>:
#include "display/options/action.hpp"
#include "lib/ssd1306.h"
#include <string.h>

Action::Action(const char *_text, void (*_fnc)(void)) : Option(_text), fnc(_fnc) {}
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	60f8      	str	r0, [r7, #12]
 80003d0:	60b9      	str	r1, [r7, #8]
 80003d2:	607a      	str	r2, [r7, #4]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	68b9      	ldr	r1, [r7, #8]
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 fa7f 	bl	80008dc <_ZN6OptionC1EPKc>
 80003de:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <_ZN6ActionC1EPKcPFvvE+0x2c>)
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4618      	mov	r0, r3
 80003ee:	3710      	adds	r7, #16
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	080056c8 	.word	0x080056c8

080003f8 <_ZN6Action4drawEPc>:

void Action::draw(char *buf) {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	strcpy(buf, getText());
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4618      	mov	r0, r3
 8000406:	f000 fa7d 	bl	8000904 <_ZN6Option7getTextEv>
 800040a:	4603      	mov	r3, r0
 800040c:	4619      	mov	r1, r3
 800040e:	6838      	ldr	r0, [r7, #0]
 8000410:	f005 f89e 	bl	8005550 <strcpy>
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <_ZN6Action5pressEv>:

uint8_t Action::press(void) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	(*fnc)();
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	4798      	blx	r3
	return 0;
 800042a:	2300      	movs	r3, #0
}
 800042c:	4618      	mov	r0, r3
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <_ZL7int_minhh>:
#include "display/screens/scroll.hpp"
#include "display/display.hpp"
#include "bitmaps.h"
#include "input.h"

static uint8_t int_min(uint8_t a, uint8_t b) {
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	460a      	mov	r2, r1
 800043e:	71fb      	strb	r3, [r7, #7]
 8000440:	4613      	mov	r3, r2
 8000442:	71bb      	strb	r3, [r7, #6]
	return a < b ? a : b;
 8000444:	79fa      	ldrb	r2, [r7, #7]
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	429a      	cmp	r2, r3
 800044a:	d201      	bcs.n	8000450 <_ZL7int_minhh+0x1c>
 800044c:	79fb      	ldrb	r3, [r7, #7]
 800044e:	e000      	b.n	8000452 <_ZL7int_minhh+0x1e>
 8000450:	79bb      	ldrb	r3, [r7, #6]
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <_ZL7int_maxhh>:

static uint8_t int_max(uint8_t a, uint8_t b) {
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	460a      	mov	r2, r1
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	4613      	mov	r3, r2
 800046a:	71bb      	strb	r3, [r7, #6]
	return a > b ? a : b;
 800046c:	79fa      	ldrb	r2, [r7, #7]
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	429a      	cmp	r2, r3
 8000472:	d901      	bls.n	8000478 <_ZL7int_maxhh+0x1c>
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	e000      	b.n	800047a <_ZL7int_maxhh+0x1e>
 8000478:	79bb      	ldrb	r3, [r7, #6]
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <_ZN6Scroll13update_cursorEv>:

void Scroll::update_cursor(void) {
 8000484:	b580      	push	{r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af02      	add	r7, sp, #8
 800048a:	6078      	str	r0, [r7, #4]
	ssd1306_FillRectangle(10, 16, 17, 63, Black);
 800048c:	2300      	movs	r3, #0
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	233f      	movs	r3, #63	; 0x3f
 8000492:	2211      	movs	r2, #17
 8000494:	2110      	movs	r1, #16
 8000496:	200a      	movs	r0, #10
 8000498:	f000 fd24 	bl	8000ee4 <ssd1306_FillRectangle>
	ssd1306_SetCursor(10, static_cast<uint8_t>(16 * (select - scroll + 1) + 6));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	7b9b      	ldrb	r3, [r3, #14]
 80004a0:	461a      	mov	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	7b5b      	ldrb	r3, [r3, #13]
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	3301      	adds	r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	011b      	lsls	r3, r3, #4
 80004ae:	b2db      	uxtb	r3, r3
 80004b0:	3306      	adds	r3, #6
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	4619      	mov	r1, r3
 80004b6:	200a      	movs	r0, #10
 80004b8:	f000 fcfc 	bl	8000eb4 <ssd1306_SetCursor>
	ssd1306_WriteString(">", Font_7x10, White);
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <_ZN6Scroll13update_cursorEv+0x4c>)
 80004be:	2301      	movs	r3, #1
 80004c0:	ca06      	ldmia	r2, {r1, r2}
 80004c2:	4804      	ldr	r0, [pc, #16]	; (80004d4 <_ZN6Scroll13update_cursorEv+0x50>)
 80004c4:	f000 fcd0 	bl	8000e68 <ssd1306_WriteString>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000008 	.word	0x20000008
 80004d4:	080055bc 	.word	0x080055bc

080004d8 <_ZN6Scroll14update_optionsEv>:
void Scroll::update_options(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af02      	add	r7, sp, #8
 80004de:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < int_min(3, option_count); i++) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	77fb      	strb	r3, [r7, #31]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	7b1b      	ldrb	r3, [r3, #12]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2003      	movs	r0, #3
 80004ec:	f7ff ffa2 	bl	8000434 <_ZL7int_minhh>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	7ffb      	ldrb	r3, [r7, #31]
 80004f6:	4293      	cmp	r3, r2
 80004f8:	bf34      	ite	cc
 80004fa:	2301      	movcc	r3, #1
 80004fc:	2300      	movcs	r3, #0
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2b00      	cmp	r3, #0
 8000502:	d041      	beq.n	8000588 <_ZN6Scroll14update_optionsEv+0xb0>
		ssd1306_FillRectangle(20, static_cast<uint8_t>(16 * (i + 1)), 127,
 8000504:	7ffb      	ldrb	r3, [r7, #31]
 8000506:	3301      	adds	r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	b2d9      	uxtb	r1, r3
 800050e:	7ffb      	ldrb	r3, [r7, #31]
 8000510:	3301      	adds	r3, #1
 8000512:	b2db      	uxtb	r3, r3
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	b2db      	uxtb	r3, r3
 8000518:	330f      	adds	r3, #15
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2200      	movs	r2, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	227f      	movs	r2, #127	; 0x7f
 8000522:	2014      	movs	r0, #20
 8000524:	f000 fcde 	bl	8000ee4 <ssd1306_FillRectangle>
				static_cast<uint8_t>(16 * (i + 1) + 15), Black);
		ssd1306_SetCursor(20, static_cast<uint8_t>(16 * (i + 1) + 6));
 8000528:	7ffb      	ldrb	r3, [r7, #31]
 800052a:	3301      	adds	r3, #1
 800052c:	b2db      	uxtb	r3, r3
 800052e:	011b      	lsls	r3, r3, #4
 8000530:	b2db      	uxtb	r3, r3
 8000532:	3306      	adds	r3, #6
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4619      	mov	r1, r3
 8000538:	2014      	movs	r0, #20
 800053a:	f000 fcbb 	bl	8000eb4 <ssd1306_SetCursor>
		char buf[MAX_CHARACTERS];
		options[scroll + i]->draw(buf);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	689a      	ldr	r2, [r3, #8]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	7b5b      	ldrb	r3, [r3, #13]
 8000546:	4619      	mov	r1, r3
 8000548:	7ffb      	ldrb	r3, [r7, #31]
 800054a:	440b      	add	r3, r1
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	4413      	add	r3, r2
 8000550:	6818      	ldr	r0, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	689a      	ldr	r2, [r3, #8]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	7b5b      	ldrb	r3, [r3, #13]
 800055a:	4619      	mov	r1, r3
 800055c:	7ffb      	ldrb	r3, [r7, #31]
 800055e:	440b      	add	r3, r1
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4413      	add	r3, r2
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f107 0208 	add.w	r2, r7, #8
 800056e:	4611      	mov	r1, r2
 8000570:	4798      	blx	r3
		ssd1306_WriteString(buf, Font_7x10, White);
 8000572:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <_ZN6Scroll14update_optionsEv+0x118>)
 8000574:	f107 0008 	add.w	r0, r7, #8
 8000578:	2301      	movs	r3, #1
 800057a:	ca06      	ldmia	r2, {r1, r2}
 800057c:	f000 fc74 	bl	8000e68 <ssd1306_WriteString>
	for (uint8_t i = 0; i < int_min(3, option_count); i++) {
 8000580:	7ffb      	ldrb	r3, [r7, #31]
 8000582:	3301      	adds	r3, #1
 8000584:	77fb      	strb	r3, [r7, #31]
 8000586:	e7ad      	b.n	80004e4 <_ZN6Scroll14update_optionsEv+0xc>
	}
	if (option_count > 3) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	7b1b      	ldrb	r3, [r3, #12]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d92b      	bls.n	80005e8 <_ZN6Scroll14update_optionsEv+0x110>
		ssd1306_DrawBitmap(122, 16, bm_scroll, 6, 48, White);
 8000590:	2301      	movs	r3, #1
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2330      	movs	r3, #48	; 0x30
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2306      	movs	r3, #6
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <_ZN6Scroll14update_optionsEv+0x11c>)
 800059c:	2110      	movs	r1, #16
 800059e:	207a      	movs	r0, #122	; 0x7a
 80005a0:	f000 fcee 	bl	8000f80 <ssd1306_DrawBitmap>
		//unit = 44/option_count
		//start = 18 + unit*scroll
		//end = 18 + unit*(scroll+3) - 1
		const uint8_t start = 18 + 44*scroll/option_count;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	7b5b      	ldrb	r3, [r3, #13]
 80005a8:	461a      	mov	r2, r3
 80005aa:	232c      	movs	r3, #44	; 0x2c
 80005ac:	fb02 f303 	mul.w	r3, r2, r3
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7b12      	ldrb	r2, [r2, #12]
 80005b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	3312      	adds	r3, #18
 80005bc:	77bb      	strb	r3, [r7, #30]
		const uint8_t end = 17 + 44*(scroll+3)/option_count;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7b5b      	ldrb	r3, [r3, #13]
 80005c2:	3303      	adds	r3, #3
 80005c4:	222c      	movs	r2, #44	; 0x2c
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7b12      	ldrb	r2, [r2, #12]
 80005ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	3311      	adds	r3, #17
 80005d6:	777b      	strb	r3, [r7, #29]
		ssd1306_FillRectangle(124, start, 125, end, White);
 80005d8:	7f7b      	ldrb	r3, [r7, #29]
 80005da:	7fb9      	ldrb	r1, [r7, #30]
 80005dc:	2201      	movs	r2, #1
 80005de:	9200      	str	r2, [sp, #0]
 80005e0:	227d      	movs	r2, #125	; 0x7d
 80005e2:	207c      	movs	r0, #124	; 0x7c
 80005e4:	f000 fc7e 	bl	8000ee4 <ssd1306_FillRectangle>
	}
}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000008 	.word	0x20000008
 80005f4:	080056d0 	.word	0x080056d0

080005f8 <_ZN6ScrollC1EP5TitlePP6Optionh>:

Scroll::Scroll(Title *_title, Option **_options, uint8_t _option_count) :
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
 8000604:	70fb      	strb	r3, [r7, #3]
		Screen(_title), options(_options), option_count(_option_count) {
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	68b9      	ldr	r1, [r7, #8]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f986 	bl	800091c <_ZN6ScreenC1EP5Title>
 8000610:	4a09      	ldr	r2, [pc, #36]	; (8000638 <_ZN6ScrollC1EP5TitlePP6Optionh+0x40>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	731a      	strb	r2, [r3, #12]
	scroll = 0;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2200      	movs	r2, #0
 8000626:	735a      	strb	r2, [r3, #13]
	select = 0;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2200      	movs	r2, #0
 800062c:	739a      	strb	r2, [r3, #14]
}
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	4618      	mov	r0, r3
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08005708 	.word	0x08005708

0800063c <_ZN6ScrollD1Ev>:
Scroll::~Scroll() {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <_ZN6ScrollD1Ev+0x34>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	601a      	str	r2, [r3, #0]
	delete[] options;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d004      	beq.n	800065c <_ZN6ScrollD1Ev+0x20>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fdcb 	bl	80051f2 <_ZdaPv>
Scroll::~Scroll() {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f970 	bl	8000944 <_ZN6ScreenD1Ev>
}
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4618      	mov	r0, r3
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	08005708 	.word	0x08005708

08000674 <_ZN6ScrollD0Ev>:
Scroll::~Scroll() {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
}
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f7ff ffdd 	bl	800063c <_ZN6ScrollD1Ev>
 8000682:	2110      	movs	r1, #16
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f004 fdb2 	bl	80051ee <_ZdlPvj>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <_ZN6Scroll4initEv>:

void Scroll::init(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	drawTitle();
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f968 	bl	8000974 <_ZN6Screen9drawTitleEv>
	update_cursor();
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff feed 	bl	8000484 <_ZN6Scroll13update_cursorEv>
	update_options();
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff14 	bl	80004d8 <_ZN6Scroll14update_optionsEv>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_ZN6Scroll4loopEv>:
uint8_t Scroll::loop(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if (Input_GetState(BtnUp)) {
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff fd7d 	bl	80001c0 <Input_GetState>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	bf14      	ite	ne
 80006cc:	2301      	movne	r3, #1
 80006ce:	2300      	moveq	r3, #0
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d048      	beq.n	8000768 <_ZN6Scroll4loopEv+0xb0>
		if (select == scroll && option_count > 3) {
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7b9a      	ldrb	r2, [r3, #14]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7b5b      	ldrb	r3, [r3, #13]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d12c      	bne.n	800073c <_ZN6Scroll4loopEv+0x84>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	7b1b      	ldrb	r3, [r3, #12]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d928      	bls.n	800073c <_ZN6Scroll4loopEv+0x84>
			if (select == 0) {
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7b9b      	ldrb	r3, [r3, #14]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d114      	bne.n	800071c <_ZN6Scroll4loopEv+0x64>
				select = option_count - 1;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7b1b      	ldrb	r3, [r3, #12]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	739a      	strb	r2, [r3, #14]
				scroll = int_max(2, select) - 2;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	7b9b      	ldrb	r3, [r3, #14]
 8000702:	4619      	mov	r1, r3
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff fea9 	bl	800045c <_ZL7int_maxhh>
 800070a:	4603      	mov	r3, r0
 800070c:	3b02      	subs	r3, #2
 800070e:	b2da      	uxtb	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	735a      	strb	r2, [r3, #13]
				update_cursor();
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff feb5 	bl	8000484 <_ZN6Scroll13update_cursorEv>
 800071a:	e00b      	b.n	8000734 <_ZN6Scroll4loopEv+0x7c>
			} else {
				select--;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7b9b      	ldrb	r3, [r3, #14]
 8000720:	3b01      	subs	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	739a      	strb	r2, [r3, #14]
				scroll--;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	7b5b      	ldrb	r3, [r3, #13]
 800072c:	3b01      	subs	r3, #1
 800072e:	b2da      	uxtb	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	735a      	strb	r2, [r3, #13]
			}
			update_options();
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fecf 	bl	80004d8 <_ZN6Scroll14update_optionsEv>
 800073a:	e013      	b.n	8000764 <_ZN6Scroll4loopEv+0xac>
		} else {
			if (select == 0) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7b9b      	ldrb	r3, [r3, #14]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d106      	bne.n	8000752 <_ZN6Scroll4loopEv+0x9a>
				select = option_count - 1;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7b1b      	ldrb	r3, [r3, #12]
 8000748:	3b01      	subs	r3, #1
 800074a:	b2da      	uxtb	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	739a      	strb	r2, [r3, #14]
 8000750:	e005      	b.n	800075e <_ZN6Scroll4loopEv+0xa6>
			} else {
				select--;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7b9b      	ldrb	r3, [r3, #14]
 8000756:	3b01      	subs	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	739a      	strb	r2, [r3, #14]
			}
			update_cursor();
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff fe90 	bl	8000484 <_ZN6Scroll13update_cursorEv>
		}
		return 1;
 8000764:	2301      	movs	r3, #1
 8000766:	e0a3      	b.n	80008b0 <_ZN6Scroll4loopEv+0x1f8>
	}
	if (Input_GetState(BtnDown)) {
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fd29 	bl	80001c0 <Input_GetState>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d044      	beq.n	8000808 <_ZN6Scroll4loopEv+0x150>
		if (select == scroll + 2 && option_count > 3) {
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7b9b      	ldrb	r3, [r3, #14]
 8000782:	461a      	mov	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7b5b      	ldrb	r3, [r3, #13]
 8000788:	3302      	adds	r3, #2
 800078a:	429a      	cmp	r2, r3
 800078c:	d125      	bne.n	80007da <_ZN6Scroll4loopEv+0x122>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7b1b      	ldrb	r3, [r3, #12]
 8000792:	2b03      	cmp	r3, #3
 8000794:	d921      	bls.n	80007da <_ZN6Scroll4loopEv+0x122>
			if (select == option_count - 1) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7b9b      	ldrb	r3, [r3, #14]
 800079a:	461a      	mov	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7b1b      	ldrb	r3, [r3, #12]
 80007a0:	3b01      	subs	r3, #1
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d109      	bne.n	80007ba <_ZN6Scroll4loopEv+0x102>
				select = 0;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	739a      	strb	r2, [r3, #14]
				scroll = 0;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	735a      	strb	r2, [r3, #13]
				update_cursor();
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f7ff fe66 	bl	8000484 <_ZN6Scroll13update_cursorEv>
 80007b8:	e00b      	b.n	80007d2 <_ZN6Scroll4loopEv+0x11a>
			} else {
				select++;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7b9b      	ldrb	r3, [r3, #14]
 80007be:	3301      	adds	r3, #1
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	739a      	strb	r2, [r3, #14]
				scroll++;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	7b5b      	ldrb	r3, [r3, #13]
 80007ca:	3301      	adds	r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	735a      	strb	r2, [r3, #13]
			}
			update_options();
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff fe80 	bl	80004d8 <_ZN6Scroll14update_optionsEv>
 80007d8:	e014      	b.n	8000804 <_ZN6Scroll4loopEv+0x14c>
		} else {
			if (select == option_count-1) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7b9b      	ldrb	r3, [r3, #14]
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7b1b      	ldrb	r3, [r3, #12]
 80007e4:	3b01      	subs	r3, #1
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d103      	bne.n	80007f2 <_ZN6Scroll4loopEv+0x13a>
				select = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	739a      	strb	r2, [r3, #14]
 80007f0:	e005      	b.n	80007fe <_ZN6Scroll4loopEv+0x146>
			}else{
				select++;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7b9b      	ldrb	r3, [r3, #14]
 80007f6:	3301      	adds	r3, #1
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	739a      	strb	r2, [r3, #14]
			}
			update_cursor();
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff fe40 	bl	8000484 <_ZN6Scroll13update_cursorEv>
		}
		return 1;
 8000804:	2301      	movs	r3, #1
 8000806:	e053      	b.n	80008b0 <_ZN6Scroll4loopEv+0x1f8>
	}
	if (Input_GetState(BtnEnter)) {
 8000808:	2002      	movs	r0, #2
 800080a:	f7ff fcd9 	bl	80001c0 <Input_GetState>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	bf14      	ite	ne
 8000814:	2301      	movne	r3, #1
 8000816:	2300      	moveq	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d047      	beq.n	80008ae <_ZN6Scroll4loopEv+0x1f6>
		if (options[select]->press()) {
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7b9b      	ldrb	r3, [r3, #14]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	4413      	add	r3, r2
 800082a:	6819      	ldr	r1, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	689a      	ldr	r2, [r3, #8]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	7b9b      	ldrb	r3, [r3, #14]
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	3304      	adds	r3, #4
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4608      	mov	r0, r1
 8000842:	4798      	blx	r3
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d02c      	beq.n	80008ae <_ZN6Scroll4loopEv+0x1f6>
			ssd1306_SetCursor(20,
					static_cast<uint8_t>(16 * ((select - scroll) + 1) + 6));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b9b      	ldrb	r3, [r3, #14]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	7b5b      	ldrb	r3, [r3, #13]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	3301      	adds	r3, #1
			ssd1306_SetCursor(20,
 8000862:	b2db      	uxtb	r3, r3
 8000864:	011b      	lsls	r3, r3, #4
 8000866:	b2db      	uxtb	r3, r3
 8000868:	3306      	adds	r3, #6
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	2014      	movs	r0, #20
 8000870:	f000 fb20 	bl	8000eb4 <ssd1306_SetCursor>
			char buf[MAX_CHARACTERS];
			options[select]->draw(buf);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	7b9b      	ldrb	r3, [r3, #14]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	6818      	ldr	r0, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7b9b      	ldrb	r3, [r3, #14]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	4413      	add	r3, r2
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f107 020c 	add.w	r2, r7, #12
 8000898:	4611      	mov	r1, r2
 800089a:	4798      	blx	r3
			ssd1306_WriteString(buf, Font_7x10, White);
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <_ZN6Scroll4loopEv+0x200>)
 800089e:	f107 000c 	add.w	r0, r7, #12
 80008a2:	2301      	movs	r3, #1
 80008a4:	ca06      	ldmia	r2, {r1, r2}
 80008a6:	f000 fadf 	bl	8000e68 <ssd1306_WriteString>
			return 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e000      	b.n	80008b0 <_ZN6Scroll4loopEv+0x1f8>
		}
	}
	return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3720      	adds	r7, #32
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000008 	.word	0x20000008

080008bc <_ZN6Scroll5closeEv>:

void Scroll::close(void) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	scroll = 0;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	735a      	strb	r2, [r3, #13]
	select = 0;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	739a      	strb	r2, [r3, #14]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
	...

080008dc <_ZN6OptionC1EPKc>:
#include "display/templates/option.hpp"

Option::Option(const char *_text) : text(_text) {}
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
 80008e6:	4a06      	ldr	r2, [pc, #24]	; (8000900 <_ZN6OptionC1EPKc+0x24>)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	08005724 	.word	0x08005724

08000904 <_ZN6Option7getTextEv>:

const char* Option::getText(void) {
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return text;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
	...

0800091c <_ZN6ScreenC1EP5Title>:
#include "display/templates/screen.hpp"

Screen::Screen(Title *_title) : title(_title) {}
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	4a06      	ldr	r2, [pc, #24]	; (8000940 <_ZN6ScreenC1EP5Title+0x24>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	683a      	ldr	r2, [r7, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4618      	mov	r0, r3
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	08005734 	.word	0x08005734

08000944 <_ZN6ScreenD1Ev>:

Screen::~Screen(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	4a08      	ldr	r2, [pc, #32]	; (8000970 <_ZN6ScreenD1Ev+0x2c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	601a      	str	r2, [r3, #0]
	delete(title);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <_ZN6ScreenD1Ev+0x20>
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	3204      	adds	r2, #4
 800095e:	6812      	ldr	r2, [r2, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	4790      	blx	r2
}
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	08005734 	.word	0x08005734

08000974 <_ZN6Screen9drawTitleEv>:

void Screen::drawTitle(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	title->draw();
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3308      	adds	r3, #8
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4610      	mov	r0, r2
 800098c:	4798      	blx	r3
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <_ZN5TitleD1Ev>:
#include "display/templates/title.hpp"

Title::~Title(void) {}
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <_ZN5TitleD1Ev+0x1c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	08005750 	.word	0x08005750

080009b8 <_ZN5TitleC1Ev>:
#ifndef INC_DISPLAY_TEMPLATES_TITLE_HPP_
#define INC_DISPLAY_TEMPLATES_TITLE_HPP_

class Title {
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <_ZN5TitleC1Ev+0x1c>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	08005750 	.word	0x08005750

080009d8 <_ZN5ImageC1EPKhhh>:
#include "display/titles/image.hpp"
#include "lib/ssd1306.h"

Image::Image(const uint8_t *_data, uint8_t _width, uint8_t _height) :
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	4611      	mov	r1, r2
 80009e4:	461a      	mov	r2, r3
 80009e6:	460b      	mov	r3, r1
 80009e8:	71fb      	strb	r3, [r7, #7]
 80009ea:	4613      	mov	r3, r2
 80009ec:	71bb      	strb	r3, [r7, #6]
		data(_data), width(_width), height(_height) {
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	4618      	mov	r0, r3
 80009f2:	f7ff ffe1 	bl	80009b8 <_ZN5TitleC1Ev>
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZN5ImageC1EPKhhh+0x40>)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	721a      	strb	r2, [r3, #8]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	725a      	strb	r2, [r3, #9]
}
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	08005764 	.word	0x08005764

08000a1c <_ZN5Image4drawEv>:

void Image::draw(void) {
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af02      	add	r7, sp, #8
 8000a22:	6078      	str	r0, [r7, #4]
	ssd1306_DrawBitmap(static_cast<uint8_t>((128 - width) / 2), static_cast<uint8_t>((16 - height) / 2), data, width,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7a1b      	ldrb	r3, [r3, #8]
 8000a28:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000a2c:	0fda      	lsrs	r2, r3, #31
 8000a2e:	4413      	add	r3, r2
 8000a30:	105b      	asrs	r3, r3, #1
 8000a32:	b2d8      	uxtb	r0, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7a5b      	ldrb	r3, [r3, #9]
 8000a38:	f1c3 0310 	rsb	r3, r3, #16
 8000a3c:	0fda      	lsrs	r2, r3, #31
 8000a3e:	4413      	add	r3, r2
 8000a40:	105b      	asrs	r3, r3, #1
 8000a42:	b2d9      	uxtb	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7a1c      	ldrb	r4, [r3, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7a5b      	ldrb	r3, [r3, #9]
 8000a50:	2501      	movs	r5, #1
 8000a52:	9501      	str	r5, [sp, #4]
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	4623      	mov	r3, r4
 8000a58:	f000 fa92 	bl	8000f80 <ssd1306_DrawBitmap>
			height, White);
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bdb0      	pop	{r4, r5, r7, pc}

08000a64 <_ZN5ImageD1Ev>:
#define INC_DISPLAY_TITLES_IMAGE_HPP_

#include "display/templates/title.hpp"
#include <inttypes.h>

class Image: public Title {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <_ZN5ImageD1Ev+0x20>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff8f 	bl	8000998 <_ZN5TitleD1Ev>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	08005764 	.word	0x08005764

08000a88 <_ZN5ImageD0Ev>:
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff ffe7 	bl	8000a64 <_ZN5ImageD1Ev>
 8000a96:	210c      	movs	r1, #12
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f004 fba8 	bl	80051ee <_ZdlPvj>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <eeprom_random_read>:

void eeprom_address_read(uint8_t *buf, uint8_t len) {
	HAL_I2C_Master_Receive(&I2C_EEPROM_HANDLE, I2C_EEPROM_ADDRESS, buf, len, I2C_EEPROM_TIMEOUT);
}

void eeprom_random_read(uint16_t address, uint8_t *buf, uint16_t len) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af04      	add	r7, sp, #16
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	80fb      	strh	r3, [r7, #6]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&I2C_EEPROM_HANDLE, I2C_EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, buf, len, I2C_EEPROM_TIMEOUT);
 8000ab8:	88fa      	ldrh	r2, [r7, #6]
 8000aba:	2364      	movs	r3, #100	; 0x64
 8000abc:	9302      	str	r3, [sp, #8]
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	21a0      	movs	r1, #160	; 0xa0
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <eeprom_random_read+0x30>)
 8000acc:	f002 f884 	bl	8002bd8 <HAL_I2C_Mem_Read>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200004f4 	.word	0x200004f4

08000adc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af04      	add	r7, sp, #16
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	9302      	str	r3, [sp, #8]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9301      	str	r3, [sp, #4]
 8000afc:	1dfb      	adds	r3, r7, #7
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	2301      	movs	r3, #1
 8000b02:	2200      	movs	r2, #0
 8000b04:	2178      	movs	r1, #120	; 0x78
 8000b06:	4803      	ldr	r0, [pc, #12]	; (8000b14 <ssd1306_WriteCommand+0x2c>)
 8000b08:	f001 ff6c 	bl	80029e4 <HAL_I2C_Mem_Write>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000548 	.word	0x20000548

08000b18 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af04      	add	r7, sp, #16
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	f04f 32ff 	mov.w	r2, #4294967295
 8000b2a:	9202      	str	r2, [sp, #8]
 8000b2c:	9301      	str	r3, [sp, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2301      	movs	r3, #1
 8000b34:	2240      	movs	r2, #64	; 0x40
 8000b36:	2178      	movs	r1, #120	; 0x78
 8000b38:	4803      	ldr	r0, [pc, #12]	; (8000b48 <ssd1306_WriteData+0x30>)
 8000b3a:	f001 ff53 	bl	80029e4 <HAL_I2C_Mem_Write>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000548 	.word	0x20000548

08000b4c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000b50:	f7ff ffc4 	bl	8000adc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000b54:	2064      	movs	r0, #100	; 0x64
 8000b56:	f001 f909 	bl	8001d6c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f000 fa7e 	bl	800105c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000b60:	2020      	movs	r0, #32
 8000b62:	f7ff ffc1 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000b66:	2000      	movs	r0, #0
 8000b68:	f7ff ffbe 	bl	8000ae8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000b6c:	20b0      	movs	r0, #176	; 0xb0
 8000b6e:	f7ff ffbb 	bl	8000ae8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000b72:	20c8      	movs	r0, #200	; 0xc8
 8000b74:	f7ff ffb8 	bl	8000ae8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff ffb5 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000b7e:	2010      	movs	r0, #16
 8000b80:	f7ff ffb2 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000b84:	2040      	movs	r0, #64	; 0x40
 8000b86:	f7ff ffaf 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000b8a:	20ff      	movs	r0, #255	; 0xff
 8000b8c:	f000 fa53 	bl	8001036 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000b90:	20a1      	movs	r0, #161	; 0xa1
 8000b92:	f7ff ffa9 	bl	8000ae8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000b96:	20a6      	movs	r0, #166	; 0xa6
 8000b98:	f7ff ffa6 	bl	8000ae8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000b9c:	20a8      	movs	r0, #168	; 0xa8
 8000b9e:	f7ff ffa3 	bl	8000ae8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000ba2:	203f      	movs	r0, #63	; 0x3f
 8000ba4:	f7ff ffa0 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ba8:	20a4      	movs	r0, #164	; 0xa4
 8000baa:	f7ff ff9d 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000bae:	20d3      	movs	r0, #211	; 0xd3
 8000bb0:	f7ff ff9a 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ff97 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000bba:	20d5      	movs	r0, #213	; 0xd5
 8000bbc:	f7ff ff94 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000bc0:	20f0      	movs	r0, #240	; 0xf0
 8000bc2:	f7ff ff91 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000bc6:	20d9      	movs	r0, #217	; 0xd9
 8000bc8:	f7ff ff8e 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000bcc:	2022      	movs	r0, #34	; 0x22
 8000bce:	f7ff ff8b 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000bd2:	20da      	movs	r0, #218	; 0xda
 8000bd4:	f7ff ff88 	bl	8000ae8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000bd8:	2012      	movs	r0, #18
 8000bda:	f7ff ff85 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000bde:	20db      	movs	r0, #219	; 0xdb
 8000be0:	f7ff ff82 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000be4:	2020      	movs	r0, #32
 8000be6:	f7ff ff7f 	bl	8000ae8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000bea:	208d      	movs	r0, #141	; 0x8d
 8000bec:	f7ff ff7c 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000bf0:	2014      	movs	r0, #20
 8000bf2:	f7ff ff79 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f000 fa30 	bl	800105c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 f80f 	bl	8000c20 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c02:	f000 f82f 	bl	8000c64 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <ssd1306_Init+0xd0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	; (8000c1c <ssd1306_Init+0xd0>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c12:	4b02      	ldr	r3, [pc, #8]	; (8000c1c <ssd1306_Init+0xd0>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	711a      	strb	r2, [r3, #4]
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200004bc 	.word	0x200004bc

08000c20 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	e00d      	b.n	8000c4c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <ssd1306_Fill+0x1a>
 8000c36:	2100      	movs	r1, #0
 8000c38:	e000      	b.n	8000c3c <ssd1306_Fill+0x1c>
 8000c3a:	21ff      	movs	r1, #255	; 0xff
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <ssd1306_Fill+0x40>)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4413      	add	r3, r2
 8000c42:	460a      	mov	r2, r1
 8000c44:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c52:	d3ed      	bcc.n	8000c30 <ssd1306_Fill+0x10>
    }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	200000bc 	.word	0x200000bc

08000c64 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	e016      	b.n	8000c9e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	3b50      	subs	r3, #80	; 0x50
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff36 	bl	8000ae8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff ff33 	bl	8000ae8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000c82:	2010      	movs	r0, #16
 8000c84:	f7ff ff30 	bl	8000ae8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	01db      	lsls	r3, r3, #7
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <ssd1306_UpdateScreen+0x4c>)
 8000c8e:	4413      	add	r3, r2
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff40 	bl	8000b18 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	d9e5      	bls.n	8000c70 <ssd1306_UpdateScreen+0xc>
    }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	200000bc 	.word	0x200000bc

08000cb4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	71bb      	strb	r3, [r7, #6]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db3d      	blt.n	8000d4a <ssd1306_DrawPixel+0x96>
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd2:	d83a      	bhi.n	8000d4a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000cd4:	797b      	ldrb	r3, [r7, #5]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d11a      	bne.n	8000d10 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	b2d8      	uxtb	r0, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	01db      	lsls	r3, r3, #7
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	; (8000d54 <ssd1306_DrawPixel+0xa0>)
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	b25a      	sxtb	r2, r3
 8000cee:	79bb      	ldrb	r3, [r7, #6]
 8000cf0:	f003 0307 	and.w	r3, r3, #7
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b259      	sxtb	r1, r3
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	4603      	mov	r3, r0
 8000d04:	01db      	lsls	r3, r3, #7
 8000d06:	4413      	add	r3, r2
 8000d08:	b2c9      	uxtb	r1, r1
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <ssd1306_DrawPixel+0xa0>)
 8000d0c:	54d1      	strb	r1, [r2, r3]
 8000d0e:	e01d      	b.n	8000d4c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d10:	79fa      	ldrb	r2, [r7, #7]
 8000d12:	79bb      	ldrb	r3, [r7, #6]
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	b2d8      	uxtb	r0, r3
 8000d18:	4603      	mov	r3, r0
 8000d1a:	01db      	lsls	r3, r3, #7
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <ssd1306_DrawPixel+0xa0>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	b25a      	sxtb	r2, r3
 8000d24:	79bb      	ldrb	r3, [r7, #6]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4013      	ands	r3, r2
 8000d38:	b259      	sxtb	r1, r3
 8000d3a:	79fa      	ldrb	r2, [r7, #7]
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	01db      	lsls	r3, r3, #7
 8000d40:	4413      	add	r3, r2
 8000d42:	b2c9      	uxtb	r1, r1
 8000d44:	4a03      	ldr	r2, [pc, #12]	; (8000d54 <ssd1306_DrawPixel+0xa0>)
 8000d46:	54d1      	strb	r1, [r2, r3]
 8000d48:	e000      	b.n	8000d4c <ssd1306_DrawPixel+0x98>
        return;
 8000d4a:	bf00      	nop
    }
}
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	200000bc 	.word	0x200000bc

08000d58 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	1d38      	adds	r0, r7, #4
 8000d62:	e880 0006 	stmia.w	r0, {r1, r2}
 8000d66:	461a      	mov	r2, r3
 8000d68:	4623      	mov	r3, r4
 8000d6a:	73fb      	strb	r3, [r7, #15]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b1f      	cmp	r3, #31
 8000d74:	d902      	bls.n	8000d7c <ssd1306_WriteChar+0x24>
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b7e      	cmp	r3, #126	; 0x7e
 8000d7a:	d901      	bls.n	8000d80 <ssd1306_WriteChar+0x28>
        return 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e06d      	b.n	8000e5c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d80:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	793b      	ldrb	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	2b80      	cmp	r3, #128	; 0x80
 8000d8c:	dc06      	bgt.n	8000d9c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000d8e:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000d90:	885b      	ldrh	r3, [r3, #2]
 8000d92:	461a      	mov	r2, r3
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000d98:	2b40      	cmp	r3, #64	; 0x40
 8000d9a:	dd01      	ble.n	8000da0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e05d      	b.n	8000e5c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e04c      	b.n	8000e40 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	3b20      	subs	r3, #32
 8000dac:	7979      	ldrb	r1, [r7, #5]
 8000dae:	fb01 f303 	mul.w	r3, r1, r3
 8000db2:	4619      	mov	r1, r3
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	440b      	add	r3, r1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	e034      	b.n	8000e30 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d012      	beq.n	8000dfc <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4413      	add	r3, r2
 8000de2:	b2d8      	uxtb	r0, r3
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000de6:	885b      	ldrh	r3, [r3, #2]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4413      	add	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	7bba      	ldrb	r2, [r7, #14]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <ssd1306_DrawPixel>
 8000dfa:	e016      	b.n	8000e2a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000dfc:	4b19      	ldr	r3, [pc, #100]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	b2d8      	uxtb	r0, r3
 8000e0a:	4b16      	ldr	r3, [pc, #88]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000e0c:	885b      	ldrh	r3, [r3, #2]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4413      	add	r3, r2
 8000e16:	b2d9      	uxtb	r1, r3
 8000e18:	7bbb      	ldrb	r3, [r7, #14]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	bf0c      	ite	eq
 8000e1e:	2301      	moveq	r3, #1
 8000e20:	2300      	movne	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	461a      	mov	r2, r3
 8000e26:	f7ff ff45 	bl	8000cb4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	793b      	ldrb	r3, [r7, #4]
 8000e32:	461a      	mov	r2, r3
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d3c5      	bcc.n	8000dc6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	797b      	ldrb	r3, [r7, #5]
 8000e42:	461a      	mov	r2, r3
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d3ad      	bcc.n	8000da6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000e4c:	881a      	ldrh	r2, [r3, #0]
 8000e4e:	793b      	ldrb	r3, [r7, #4]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <ssd1306_WriteChar+0x10c>)
 8000e58:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3724      	adds	r7, #36	; 0x24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd90      	pop	{r4, r7, pc}
 8000e64:	200004bc 	.word	0x200004bc

08000e68 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	1d38      	adds	r0, r7, #4
 8000e72:	e880 0006 	stmia.w	r0, {r1, r2}
 8000e76:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000e78:	e012      	b.n	8000ea0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	7818      	ldrb	r0, [r3, #0]
 8000e7e:	78fb      	ldrb	r3, [r7, #3]
 8000e80:	1d3a      	adds	r2, r7, #4
 8000e82:	ca06      	ldmia	r2, {r1, r2}
 8000e84:	f7ff ff68 	bl	8000d58 <ssd1306_WriteChar>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d002      	beq.n	8000e9a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	e008      	b.n	8000eac <ssd1306_WriteString+0x44>
        }
        str++;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1e8      	bne.n	8000e7a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	781b      	ldrb	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <ssd1306_SetCursor>:
	ssd1306_SetCursor(x, y);
	return ssd1306_WriteString(str, Font, color);
}

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <ssd1306_SetCursor+0x2c>)
 8000eca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <ssd1306_SetCursor+0x2c>)
 8000ed2:	805a      	strh	r2, [r3, #2]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200004bc 	.word	0x200004bc

08000ee4 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	4608      	mov	r0, r1
 8000eee:	4611      	mov	r1, r2
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71bb      	strb	r3, [r7, #6]
 8000efa:	460b      	mov	r3, r1
 8000efc:	717b      	strb	r3, [r7, #5]
 8000efe:	4613      	mov	r3, r2
 8000f00:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	797b      	ldrb	r3, [r7, #5]
 8000f06:	4293      	cmp	r3, r2
 8000f08:	bf28      	it	cs
 8000f0a:	4613      	movcs	r3, r2
 8000f0c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000f0e:	797a      	ldrb	r2, [r7, #5]
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	bf38      	it	cc
 8000f16:	4613      	movcc	r3, r2
 8000f18:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000f1a:	79ba      	ldrb	r2, [r7, #6]
 8000f1c:	793b      	ldrb	r3, [r7, #4]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	bf28      	it	cs
 8000f22:	4613      	movcs	r3, r2
 8000f24:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000f26:	793a      	ldrb	r2, [r7, #4]
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	bf38      	it	cc
 8000f2e:	4613      	movcc	r3, r2
 8000f30:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000f32:	7afb      	ldrb	r3, [r7, #11]
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e017      	b.n	8000f68 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000f38:	7b7b      	ldrb	r3, [r7, #13]
 8000f3a:	73bb      	strb	r3, [r7, #14]
 8000f3c:	e009      	b.n	8000f52 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8000f3e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f42:	7bf9      	ldrb	r1, [r7, #15]
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff feb4 	bl	8000cb4 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	7bba      	ldrb	r2, [r7, #14]
 8000f54:	7b3b      	ldrb	r3, [r7, #12]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d803      	bhi.n	8000f62 <ssd1306_FillRectangle+0x7e>
 8000f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	daed      	bge.n	8000f3e <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	3301      	adds	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	7abb      	ldrb	r3, [r7, #10]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d803      	bhi.n	8000f78 <ssd1306_FillRectangle+0x94>
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b3f      	cmp	r3, #63	; 0x3f
 8000f74:	d9e0      	bls.n	8000f38 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
}
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd90      	pop	{r4, r7, pc}

08000f80 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	603a      	str	r2, [r7, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	4613      	mov	r3, r2
 8000f94:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000f96:	797b      	ldrb	r3, [r7, #5]
 8000f98:	3307      	adds	r3, #7
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	da00      	bge.n	8000fa0 <ssd1306_DrawBitmap+0x20>
 8000f9e:	3307      	adds	r3, #7
 8000fa0:	10db      	asrs	r3, r3, #3
 8000fa2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db3e      	blt.n	800102e <ssd1306_DrawBitmap+0xae>
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	2b3f      	cmp	r3, #63	; 0x3f
 8000fb4:	d83b      	bhi.n	800102e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73bb      	strb	r3, [r7, #14]
 8000fba:	e033      	b.n	8001024 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	737b      	strb	r3, [r7, #13]
 8000fc0:	e026      	b.n	8001010 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000fc2:	7b7b      	ldrb	r3, [r7, #13]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e00d      	b.n	8000ff0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000fda:	fb02 f303 	mul.w	r3, r2, r3
 8000fde:	7b7a      	ldrb	r2, [r7, #13]
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	da08      	bge.n	800100a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	7b7b      	ldrb	r3, [r7, #13]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	7f3a      	ldrb	r2, [r7, #28]
 8001002:	79b9      	ldrb	r1, [r7, #6]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fe55 	bl	8000cb4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800100a:	7b7b      	ldrb	r3, [r7, #13]
 800100c:	3301      	adds	r3, #1
 800100e:	737b      	strb	r3, [r7, #13]
 8001010:	7b7a      	ldrb	r2, [r7, #13]
 8001012:	797b      	ldrb	r3, [r7, #5]
 8001014:	429a      	cmp	r2, r3
 8001016:	d3d4      	bcc.n	8000fc2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	3301      	adds	r3, #1
 800101c:	73bb      	strb	r3, [r7, #14]
 800101e:	79bb      	ldrb	r3, [r7, #6]
 8001020:	3301      	adds	r3, #1
 8001022:	71bb      	strb	r3, [r7, #6]
 8001024:	7bba      	ldrb	r2, [r7, #14]
 8001026:	7e3b      	ldrb	r3, [r7, #24]
 8001028:	429a      	cmp	r2, r3
 800102a:	d3c7      	bcc.n	8000fbc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 800102c:	e000      	b.n	8001030 <ssd1306_DrawBitmap+0xb0>
        return;
 800102e:	bf00      	nop
}
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001040:	2381      	movs	r3, #129	; 0x81
 8001042:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fd4e 	bl	8000ae8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fd4a 	bl	8000ae8 <ssd1306_WriteCommand>
}
 8001054:	bf00      	nop
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800106c:	23af      	movs	r3, #175	; 0xaf
 800106e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <ssd1306_SetDisplayOn+0x38>)
 8001072:	2201      	movs	r2, #1
 8001074:	715a      	strb	r2, [r3, #5]
 8001076:	e004      	b.n	8001082 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001078:	23ae      	movs	r3, #174	; 0xae
 800107a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <ssd1306_SetDisplayOn+0x38>)
 800107e:	2200      	movs	r2, #0
 8001080:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001082:	7bfb      	ldrb	r3, [r7, #15]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fd2f 	bl	8000ae8 <ssd1306_WriteCommand>
}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200004bc 	.word	0x200004bc

08001098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800109e:	f000 fe03 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a2:	f000 f83f 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010a6:	f000 fad3 	bl	8001650 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010aa:	f000 f8d5 	bl	8001258 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010ae:	f000 f901 	bl	80012b4 <MX_I2C2_Init>
  MX_ADC1_Init();
 80010b2:	f000 f893 	bl	80011dc <MX_ADC1_Init>
  MX_SPI2_Init();
 80010b6:	f000 f92b 	bl	8001310 <MX_SPI2_Init>
  MX_TIM2_Init();
 80010ba:	f000 f9fd 	bl	80014b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010be:	f000 f95d 	bl	800137c <MX_TIM1_Init>
  MX_TIM3_Init();
 80010c2:	f000 fa6f 	bl	80015a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80010c6:	210c      	movs	r1, #12
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <main+0x80>)
 80010ca:	f003 f9d3 	bl	8004474 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010ce:	2100      	movs	r1, #0
 80010d0:	4812      	ldr	r0, [pc, #72]	; (800111c <main+0x84>)
 80010d2:	f003 f9cf 	bl	8004474 <HAL_TIM_PWM_Start>

  //between 50 & 100
  //2,000 - 4,000
  TIM1->CCR4 = 3000;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <main+0x88>)
 80010d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
  TIM2->CCR1 = 3000;
 80010de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010e6:	635a      	str	r2, [r3, #52]	; 0x34
  Control_Init();
 80010e8:	f7ff f830 	bl	800014c <Control_Init>
  //servo 30-130
  HAL_Delay(7000);
 80010ec:	f641 3058 	movw	r0, #7000	; 0x1b58
 80010f0:	f000 fe3c 	bl	8001d6c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	Control_Loop();
	for (int x = 3000; x < 3200; x++) {
 80010f4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	e008      	b.n	800110e <main+0x76>
	  TIM1->CCR4 = x;
 80010fc:	4a08      	ldr	r2, [pc, #32]	; (8001120 <main+0x88>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
	  HAL_Delay(100);
 8001102:	2064      	movs	r0, #100	; 0x64
 8001104:	f000 fe32 	bl	8001d6c <HAL_Delay>
	for (int x = 3000; x < 3200; x++) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3301      	adds	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001114:	dbf2      	blt.n	80010fc <main+0x64>
 8001116:	e7ed      	b.n	80010f4 <main+0x5c>
 8001118:	200005f4 	.word	0x200005f4
 800111c:	2000063c 	.word	0x2000063c
 8001120:	40012c00 	.word	0x40012c00

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800112e:	2228      	movs	r2, #40	; 0x28
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f004 f8d4 	bl	80052e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800115e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001170:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001172:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117c:	4618      	mov	r0, r3
 800117e:	f002 fb47 	bl	8003810 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001188:	f000 fafa 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800119c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2102      	movs	r1, #2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 fdb3 	bl	8003d14 <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b4:	f000 fae4 	bl	8001780 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80011b8:	2302      	movs	r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80011bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 ff21 	bl	800400c <HAL_RCCEx_PeriphCLKConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80011d0:	f000 fad6 	bl	8001780 <Error_Handler>
  }
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	; 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_ADC1_Init+0x74>)
 80011ee:	4a19      	ldr	r2, [pc, #100]	; (8001254 <MX_ADC1_Init+0x78>)
 80011f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_ADC1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_ADC1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_ADC1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_ADC1_Init+0x74>)
 8001206:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800120a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_ADC1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_ADC1_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001218:	480d      	ldr	r0, [pc, #52]	; (8001250 <MX_ADC1_Init+0x74>)
 800121a:	f000 fdcb 	bl	8001db4 <HAL_ADC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001224:	f000 faac 	bl	8001780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001228:	2300      	movs	r3, #0
 800122a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_ADC1_Init+0x74>)
 800123a:	f000 fe93 	bl	8001f64 <HAL_ADC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001244:	f000 fa9c 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200004c4 	.word	0x200004c4
 8001254:	40012400 	.word	0x40012400

08001258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	; (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f001 fa61 	bl	800275c <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 fa6e 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200004f4 	.word	0x200004f4
 80012ac:	40005400 	.word	0x40005400
 80012b0:	000186a0 	.word	0x000186a0

080012b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C2_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_I2C2_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012be:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_I2C2_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <MX_I2C2_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C2_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_I2C2_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_I2C2_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_I2C2_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_I2C2_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_I2C2_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_I2C2_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C2_Init+0x50>)
 80012f2:	f001 fa33 	bl	800275c <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 fa40 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000548 	.word	0x20000548
 8001308:	40005800 	.word	0x40005800
 800130c:	000186a0 	.word	0x000186a0

08001310 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_SPI2_Init+0x64>)
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <MX_SPI2_Init+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_SPI2_Init+0x64>)
 800131c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001320:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_SPI2_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <MX_SPI2_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_SPI2_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI2_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <MX_SPI2_Init+0x64>)
 800133c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001340:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_SPI2_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001348:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <MX_SPI2_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <MX_SPI2_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <MX_SPI2_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_SPI2_Init+0x64>)
 800135c:	220a      	movs	r2, #10
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_SPI2_Init+0x64>)
 8001362:	f002 ff09 	bl	8004178 <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800136c:	f000 fa08 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000059c 	.word	0x2000059c
 8001378:	40003800 	.word	0x40003800

0800137c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2220      	movs	r2, #32
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 ff93 	bl	80052e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ba:	4b3d      	ldr	r3, [pc, #244]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013bc:	4a3d      	ldr	r2, [pc, #244]	; (80014b4 <MX_TIM1_Init+0x138>)
 80013be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 36-1;
 80013c0:	4b3b      	ldr	r3, [pc, #236]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013c2:	2223      	movs	r2, #35	; 0x23
 80013c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000-1;
 80013cc:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013ce:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80013d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d4:	4b36      	ldr	r3, [pc, #216]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013da:	4b35      	ldr	r3, [pc, #212]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013e6:	4832      	ldr	r0, [pc, #200]	; (80014b0 <MX_TIM1_Init+0x134>)
 80013e8:	f002 ff4a 	bl	8004280 <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013f2:	f000 f9c5 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001400:	4619      	mov	r1, r3
 8001402:	482b      	ldr	r0, [pc, #172]	; (80014b0 <MX_TIM1_Init+0x134>)
 8001404:	f003 faa2 	bl	800494c <HAL_TIM_ConfigClockSource>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800140e:	f000 f9b7 	bl	8001780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001412:	4827      	ldr	r0, [pc, #156]	; (80014b0 <MX_TIM1_Init+0x134>)
 8001414:	f002 ffd6 	bl	80043c4 <HAL_TIM_PWM_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800141e:	f000 f9af 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800142a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800142e:	4619      	mov	r1, r3
 8001430:	481f      	ldr	r0, [pc, #124]	; (80014b0 <MX_TIM1_Init+0x134>)
 8001432:	f003 fe1b 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800143c:	f000 f9a0 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	; 0x60
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145c:	220c      	movs	r2, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4813      	ldr	r0, [pc, #76]	; (80014b0 <MX_TIM1_Init+0x134>)
 8001462:	f003 f9b1 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800146c:	f000 f988 	bl	8001780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001488:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <MX_TIM1_Init+0x134>)
 8001494:	f003 fe48 	bl	8005128 <HAL_TIMEx_ConfigBreakDeadTime>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800149e:	f000 f96f 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <MX_TIM1_Init+0x134>)
 80014a4:	f000 fae4 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 80014a8:	bf00      	nop
 80014aa:	3758      	adds	r7, #88	; 0x58
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200005f4 	.word	0x200005f4
 80014b4:	40012c00 	.word	0x40012c00

080014b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
 80014e4:	615a      	str	r2, [r3, #20]
 80014e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_TIM2_Init+0xe8>)
 80014ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36-1;
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_TIM2_Init+0xe8>)
 80014f2:	2223      	movs	r2, #35	; 0x23
 80014f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <MX_TIM2_Init+0xe8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 40000-1;
 80014fc:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <MX_TIM2_Init+0xe8>)
 80014fe:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001502:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_TIM2_Init+0xe8>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001510:	4823      	ldr	r0, [pc, #140]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001512:	f002 feb5 	bl	8004280 <HAL_TIM_Base_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800151c:	f000 f930 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152a:	4619      	mov	r1, r3
 800152c:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_TIM2_Init+0xe8>)
 800152e:	f003 fa0d 	bl	800494c <HAL_TIM_ConfigClockSource>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001538:	f000 f922 	bl	8001780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800153c:	4818      	ldr	r0, [pc, #96]	; (80015a0 <MX_TIM2_Init+0xe8>)
 800153e:	f002 ff41 	bl	80043c4 <HAL_TIM_PWM_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001548:	f000 f91a 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001554:	f107 0320 	add.w	r3, r7, #32
 8001558:	4619      	mov	r1, r3
 800155a:	4811      	ldr	r0, [pc, #68]	; (80015a0 <MX_TIM2_Init+0xe8>)
 800155c:	f003 fd86 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001566:	f000 f90b 	bl	8001780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156a:	2360      	movs	r3, #96	; 0x60
 800156c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001582:	f003 f921 	bl	80047c8 <HAL_TIM_PWM_ConfigChannel>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800158c:	f000 f8f8 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001590:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001592:	f000 fa6d 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 8001596:	bf00      	nop
 8001598:	3738      	adds	r7, #56	; 0x38
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000063c 	.word	0x2000063c

080015a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	463b      	mov	r3, r7
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015c2:	4a22      	ldr	r2, [pc, #136]	; (800164c <MX_TIM3_Init+0xa8>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 720-1;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015c8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80015cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b19      	ldr	r3, [pc, #100]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e8:	4817      	ldr	r0, [pc, #92]	; (8001648 <MX_TIM3_Init+0xa4>)
 80015ea:	f002 fe49 	bl	8004280 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015f4:	f000 f8c4 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	4619      	mov	r1, r3
 8001604:	4810      	ldr	r0, [pc, #64]	; (8001648 <MX_TIM3_Init+0xa4>)
 8001606:	f003 f9a1 	bl	800494c <HAL_TIM_ConfigClockSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001610:	f000 f8b6 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_TIM3_Init+0xa4>)
 8001622:	f003 fd23 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800162c:	f000 f8a8 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8001630:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_TIM3_Init+0xa4>)
 8001632:	f002 fe75 	bl	8004320 <HAL_TIM_Base_Start_IT>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_TIM3_Init+0x9c>
	Error_Handler();
 800163c:	f000 f8a0 	bl	8001780 <Error_Handler>
  }
  /* USER CODE END TIM3_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000684 	.word	0x20000684
 800164c:	40000400 	.word	0x40000400

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001664:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <MX_GPIO_Init+0x100>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a39      	ldr	r2, [pc, #228]	; (8001750 <MX_GPIO_Init+0x100>)
 800166a:	f043 0320 	orr.w	r3, r3, #32
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b37      	ldr	r3, [pc, #220]	; (8001750 <MX_GPIO_Init+0x100>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <MX_GPIO_Init+0x100>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a33      	ldr	r2, [pc, #204]	; (8001750 <MX_GPIO_Init+0x100>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b31      	ldr	r3, [pc, #196]	; (8001750 <MX_GPIO_Init+0x100>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <MX_GPIO_Init+0x100>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <MX_GPIO_Init+0x100>)
 800169a:	f043 0308 	orr.w	r3, r3, #8
 800169e:	6193      	str	r3, [r2, #24]
 80016a0:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <MX_GPIO_Init+0x100>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 7140 	mov.w	r1, #768	; 0x300
 80016b2:	4828      	ldr	r0, [pc, #160]	; (8001754 <MX_GPIO_Init+0x104>)
 80016b4:	f001 f839 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2120      	movs	r1, #32
 80016bc:	4826      	ldr	r0, [pc, #152]	; (8001758 <MX_GPIO_Init+0x108>)
 80016be:	f001 f834 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN4_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin;
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN4_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	481f      	ldr	r0, [pc, #124]	; (8001754 <MX_GPIO_Init+0x104>)
 80016d6:	f000 fe8d 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN3_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN3_Pin|BTN1_Pin;
 80016da:	2307      	movs	r3, #7
 80016dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	4619      	mov	r1, r3
 80016ec:	481a      	ldr	r0, [pc, #104]	; (8001758 <MX_GPIO_Init+0x108>)
 80016ee:	f000 fe81 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRQ_Pin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 80016f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_GPIO_Init+0x10c>)
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	4814      	ldr	r0, [pc, #80]	; (8001758 <MX_GPIO_Init+0x108>)
 8001708:	f000 fe74 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 800170c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2302      	movs	r3, #2
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <MX_GPIO_Init+0x104>)
 8001726:	f000 fe65 	bl	80023f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WP_Pin */
  GPIO_InitStruct.Pin = WP_Pin;
 800172a:	2320      	movs	r3, #32
 800172c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	2302      	movs	r3, #2
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_GPIO_Init+0x108>)
 8001742:	f000 fe57 	bl	80023f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	40010800 	.word	0x40010800
 8001758:	40010c00 	.word	0x40010c00
 800175c:	10110000 	.word	0x10110000

08001760 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d101      	bne.n	8001774 <HAL_TIM_PeriodElapsedCallback+0x14>
		Input_TimerHandler();
 8001770:	f7fe fd3c 	bl	80001ec <Input_TimerHandler>
	}
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000684 	.word	0x20000684

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <HAL_MspInit+0x5c>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <HAL_MspInit+0x5c>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_MspInit+0x5c>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_MspInit+0x5c>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <HAL_MspInit+0x5c>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_MspInit+0x5c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_MspInit+0x60>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_MspInit+0x60>)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bc80      	pop	{r7}
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010000 	.word	0x40010000

080017f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_ADC_MspInit+0x6c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d121      	bne.n	8001854 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <HAL_ADC_MspInit+0x70>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_ADC_MspInit+0x70>)
 8001816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_ADC_MspInit+0x70>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001828:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_ADC_MspInit+0x70>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_ADC_MspInit+0x70>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	4b0a      	ldr	r3, [pc, #40]	; (8001860 <HAL_ADC_MspInit+0x70>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ROT_Pin|PR1_Pin|PR2_Pin|PR3_Pin
 8001840:	237f      	movs	r3, #127	; 0x7f
 8001842:	613b      	str	r3, [r7, #16]
                          |PR4_Pin|PR5_Pin|PR6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001844:	2303      	movs	r3, #3
 8001846:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_ADC_MspInit+0x74>)
 8001850:	f000 fdd0 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40012400 	.word	0x40012400
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800

08001868 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <HAL_I2C_MspInit+0xc8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d124      	bne.n	80018d2 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a29      	ldr	r2, [pc, #164]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018a0:	23c0      	movs	r3, #192	; 0xc0
 80018a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018a4:	2312      	movs	r3, #18
 80018a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 0318 	add.w	r3, r7, #24
 80018b0:	4619      	mov	r1, r3
 80018b2:	4821      	ldr	r0, [pc, #132]	; (8001938 <HAL_I2C_MspInit+0xd0>)
 80018b4:	f000 fd9e 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b8:	4b1e      	ldr	r3, [pc, #120]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 80018be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c2:	61d3      	str	r3, [r2, #28]
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018d0:	e029      	b.n	8001926 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a19      	ldr	r2, [pc, #100]	; (800193c <HAL_I2C_MspInit+0xd4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d124      	bne.n	8001926 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018dc:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fa:	2312      	movs	r3, #18
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001902:	f107 0318 	add.w	r3, r7, #24
 8001906:	4619      	mov	r1, r3
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <HAL_I2C_MspInit+0xd0>)
 800190a:	f000 fd73 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	61d3      	str	r3, [r2, #28]
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_I2C_MspInit+0xcc>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40005400 	.word	0x40005400
 8001934:	40021000 	.word	0x40021000
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40005800 	.word	0x40005800

08001940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_SPI_MspInit+0x8c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d131      	bne.n	80019c4 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_SPI_MspInit+0x90>)
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_SPI_MspInit+0x90>)
 8001966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800196a:	61d3      	str	r3, [r2, #28]
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_SPI_MspInit+0x90>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_SPI_MspInit+0x90>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_SPI_MspInit+0x90>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_SPI_MspInit+0x90>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001990:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001994:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_SPI_MspInit+0x94>)
 80019a6:	f000 fd25 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <HAL_SPI_MspInit+0x94>)
 80019c0:	f000 fd18 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019c4:	bf00      	nop
 80019c6:	3720      	adds	r7, #32
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40003800 	.word	0x40003800
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40010c00 	.word	0x40010c00

080019d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_TIM_Base_MspInit+0x8c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10c      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ea:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 80019f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f4:	6193      	str	r3, [r2, #24]
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a02:	e02a      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0c:	d10c      	bne.n	8001a28 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
}
 8001a26:	e018      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_TIM_Base_MspInit+0x94>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d113      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	61d3      	str	r3, [r2, #28]
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_TIM_Base_MspInit+0x90>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	201d      	movs	r0, #29
 8001a50:	f000 fc99 	bl	8002386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a54:	201d      	movs	r0, #29
 8001a56:	f000 fcb2 	bl	80023be <HAL_NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40000400 	.word	0x40000400

08001a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_TIM_MspPostInit+0xbc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d119      	bne.n	8001ac4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_TIM_MspPostInit+0xc0>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a26      	ldr	r2, [pc, #152]	; (8001b30 <HAL_TIM_MspPostInit+0xc0>)
 8001a96:	f043 0304 	orr.w	r3, r3, #4
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_TIM_MspPostInit+0xc0>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = SIG_ESC_Pin;
 8001aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIG_ESC_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	481d      	ldr	r0, [pc, #116]	; (8001b34 <HAL_TIM_MspPostInit+0xc4>)
 8001abe:	f000 fc99 	bl	80023f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ac2:	e02f      	b.n	8001b24 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001acc:	d12a      	bne.n	8001b24 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_TIM_MspPostInit+0xc0>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_TIM_MspPostInit+0xc0>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6193      	str	r3, [r2, #24]
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_TIM_MspPostInit+0xc0>)
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIG_SERVO_Pin;
 8001ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SIG_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <HAL_TIM_MspPostInit+0xc4>)
 8001afc:	f000 fc7a 	bl	80023f4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_TIM_MspPostInit+0xc8>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_TIM_MspPostInit+0xc8>)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	6053      	str	r3, [r2, #4]
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40012c00 	.word	0x40012c00
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40010800 	.word	0x40010800
 8001b38:	40010000 	.word	0x40010000

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr

08001b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b82:	f000 f8d7 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b90:	4802      	ldr	r0, [pc, #8]	; (8001b9c <TIM3_IRQHandler+0x10>)
 8001b92:	f002 fd11 	bl	80045b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000684 	.word	0x20000684

08001ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return 1;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <_kill>:

int _kill(int pid, int sig)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bb8:	f003 fb58 	bl	800526c <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2216      	movs	r2, #22
 8001bc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_exit>:

void _exit (int status)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffe7 	bl	8001bae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001be0:	e7fe      	b.n	8001be0 <_exit+0x12>
	...

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f003 fb2a 	bl	800526c <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20005000 	.word	0x20005000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	200006cc 	.word	0x200006cc
 8001c4c:	200006e8 	.word	0x200006e8

08001c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c5c:	f7ff fff8 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c62:	490c      	ldr	r1, [pc, #48]	; (8001c94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c78:	4c09      	ldr	r4, [pc, #36]	; (8001ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f003 faf7 	bl	8005278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c8a:	f7ff fa05 	bl	8001098 <main>
  bx lr
 8001c8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001c98:	08005f10 	.word	0x08005f10
  ldr r2, =_sbss
 8001c9c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001ca0:	200006e8 	.word	0x200006e8

08001ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC1_2_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_Init+0x28>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_Init+0x28>)
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 fb59 	bl	8002370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f808 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc4:	f7ff fd62 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x54>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x58>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fb71 	bl	80023da <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00e      	b.n	8001d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d80a      	bhi.n	8001d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f000 fb39 	bl	8002386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d14:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_InitTick+0x5c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000010 	.word	0x20000010
 8001d2c:	20000018 	.word	0x20000018
 8001d30:	20000014 	.word	0x20000014

08001d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x1c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x20>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_IncTick+0x20>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	20000018 	.word	0x20000018
 8001d54:	200006d0 	.word	0x200006d0

08001d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <HAL_GetTick+0x10>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	200006d0 	.word	0x200006d0

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff fff0 	bl	8001d58 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_Delay+0x44>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffe0 	bl	8001d58 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000018 	.word	0x20000018

08001db4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e0be      	b.n	8001f54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fcfc 	bl	80017f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f9ab 	bl	8002154 <ADC_ConversionStop_Disable>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 8099 	bne.w	8001f42 <HAL_ADC_Init+0x18e>
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f040 8095 	bne.w	8001f42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e20:	f023 0302 	bic.w	r3, r3, #2
 8001e24:	f043 0202 	orr.w	r2, r3, #2
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e34:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7b1b      	ldrb	r3, [r3, #12]
 8001e3a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001e3c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4c:	d003      	beq.n	8001e56 <HAL_ADC_Init+0xa2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_ADC_Init+0xa8>
 8001e56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5a:	e000      	b.n	8001e5e <HAL_ADC_Init+0xaa>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7d1b      	ldrb	r3, [r3, #20]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d119      	bne.n	8001ea0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7b1b      	ldrb	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	035a      	lsls	r2, r3, #13
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	e00b      	b.n	8001ea0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e98:	f043 0201 	orr.w	r2, r3, #1
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	4b28      	ldr	r3, [pc, #160]	; (8001f5c <HAL_ADC_Init+0x1a8>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed0:	d003      	beq.n	8001eda <HAL_ADC_Init+0x126>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d104      	bne.n	8001ee4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	051b      	lsls	r3, r3, #20
 8001ee2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_ADC_Init+0x1ac>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d10b      	bne.n	8001f20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f1e:	e018      	b.n	8001f52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f023 0312 	bic.w	r3, r3, #18
 8001f28:	f043 0210 	orr.w	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f40:	e007      	b.n	8001f52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	f043 0210 	orr.w	r2, r3, #16
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	ffe1f7fd 	.word	0xffe1f7fd
 8001f60:	ff1f0efe 	.word	0xff1f0efe

08001f64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x20>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e0dc      	b.n	800213e <HAL_ADC_ConfigChannel+0x1da>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b06      	cmp	r3, #6
 8001f92:	d81c      	bhi.n	8001fce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b05      	subs	r3, #5
 8001fa6:	221f      	movs	r2, #31
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4019      	ands	r1, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b05      	subs	r3, #5
 8001fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34
 8001fcc:	e03c      	b.n	8002048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d81c      	bhi.n	8002010 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b23      	subs	r3, #35	; 0x23
 8001fe8:	221f      	movs	r2, #31
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	4019      	ands	r1, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	3b23      	subs	r3, #35	; 0x23
 8002002:	fa00 f203 	lsl.w	r2, r0, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
 800200e:	e01b      	b.n	8002048 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	3b41      	subs	r3, #65	; 0x41
 8002022:	221f      	movs	r2, #31
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	4019      	ands	r1, r3
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	3b41      	subs	r3, #65	; 0x41
 800203c:	fa00 f203 	lsl.w	r2, r0, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b09      	cmp	r3, #9
 800204e:	d91c      	bls.n	800208a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68d9      	ldr	r1, [r3, #12]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	3b1e      	subs	r3, #30
 8002062:	2207      	movs	r2, #7
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	4019      	ands	r1, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6898      	ldr	r0, [r3, #8]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	3b1e      	subs	r3, #30
 800207c:	fa00 f203 	lsl.w	r2, r0, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	e019      	b.n	80020be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6919      	ldr	r1, [r3, #16]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	2207      	movs	r2, #7
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	4019      	ands	r1, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	6898      	ldr	r0, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	fa00 f203 	lsl.w	r2, r0, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b10      	cmp	r3, #16
 80020c4:	d003      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ca:	2b11      	cmp	r3, #17
 80020cc:	d132      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1d      	ldr	r2, [pc, #116]	; (8002148 <HAL_ADC_ConfigChannel+0x1e4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d125      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d126      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d11a      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020fe:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_ADC_ConfigChannel+0x1e8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_ADC_ConfigChannel+0x1ec>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	0c9a      	lsrs	r2, r3, #18
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002114:	e002      	b.n	800211c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3b01      	subs	r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f9      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x1b2>
 8002122:	e007      	b.n	8002134 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	f043 0220 	orr.w	r2, r3, #32
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	40012400 	.word	0x40012400
 800214c:	20000010 	.word	0x20000010
 8002150:	431bde83 	.word	0x431bde83

08002154 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d12e      	bne.n	80021cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800217e:	f7ff fdeb 	bl	8001d58 <HAL_GetTick>
 8002182:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002184:	e01b      	b.n	80021be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002186:	f7ff fde7 	bl	8001d58 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d914      	bls.n	80021be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10d      	bne.n	80021be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	f043 0201 	orr.w	r2, r3, #1
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e007      	b.n	80021ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d0dc      	beq.n	8002186 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021f4:	4013      	ands	r3, r2
 80021f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220a:	4a04      	ldr	r2, [pc, #16]	; (800221c <__NVIC_SetPriorityGrouping+0x44>)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	60d3      	str	r3, [r2, #12]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bc80      	pop	{r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <__NVIC_GetPriorityGrouping+0x18>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	0a1b      	lsrs	r3, r3, #8
 800222a:	f003 0307 	and.w	r3, r3, #7
}
 800222e:	4618      	mov	r0, r3
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	2b00      	cmp	r3, #0
 800224c:	db0b      	blt.n	8002266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	f003 021f 	and.w	r2, r3, #31
 8002254:	4906      	ldr	r1, [pc, #24]	; (8002270 <__NVIC_EnableIRQ+0x34>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	2001      	movs	r0, #1
 800225e:	fa00 f202 	lsl.w	r2, r0, r2
 8002262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100

08002274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002284:	2b00      	cmp	r3, #0
 8002286:	db0a      	blt.n	800229e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <__NVIC_SetPriority+0x4c>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	0112      	lsls	r2, r2, #4
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	440b      	add	r3, r1
 8002298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800229c:	e00a      	b.n	80022b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4908      	ldr	r1, [pc, #32]	; (80022c4 <__NVIC_SetPriority+0x50>)
 80022a4:	79fb      	ldrb	r3, [r7, #7]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	3b04      	subs	r3, #4
 80022ac:	0112      	lsls	r2, r2, #4
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	440b      	add	r3, r1
 80022b2:	761a      	strb	r2, [r3, #24]
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f1c3 0307 	rsb	r3, r3, #7
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	bf28      	it	cs
 80022e6:	2304      	movcs	r3, #4
 80022e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3304      	adds	r3, #4
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d902      	bls.n	80022f8 <NVIC_EncodePriority+0x30>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3b03      	subs	r3, #3
 80022f6:	e000      	b.n	80022fa <NVIC_EncodePriority+0x32>
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	401a      	ands	r2, r3
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002310:	f04f 31ff 	mov.w	r1, #4294967295
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43d9      	mvns	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	4313      	orrs	r3, r2
         );
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233c:	d301      	bcc.n	8002342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233e:	2301      	movs	r3, #1
 8002340:	e00f      	b.n	8002362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <SysTick_Config+0x40>)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	3b01      	subs	r3, #1
 8002348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800234a:	210f      	movs	r1, #15
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	f7ff ff90 	bl	8002274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <SysTick_Config+0x40>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	; (800236c <SysTick_Config+0x40>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff2d 	bl	80021d8 <__NVIC_SetPriorityGrouping>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	4603      	mov	r3, r0
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002398:	f7ff ff42 	bl	8002220 <__NVIC_GetPriorityGrouping>
 800239c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f7ff ff90 	bl	80022c8 <NVIC_EncodePriority>
 80023a8:	4602      	mov	r2, r0
 80023aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff5f 	bl	8002274 <__NVIC_SetPriority>
}
 80023b6:	bf00      	nop
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff35 	bl	800223c <__NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff ffa2 	bl	800232c <SysTick_Config>
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	e169      	b.n	80026dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002408:	2201      	movs	r2, #1
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8158 	bne.w	80026d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a9a      	ldr	r2, [pc, #616]	; (8002694 <HAL_GPIO_Init+0x2a0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d05e      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002430:	4a98      	ldr	r2, [pc, #608]	; (8002694 <HAL_GPIO_Init+0x2a0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d875      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002436:	4a98      	ldr	r2, [pc, #608]	; (8002698 <HAL_GPIO_Init+0x2a4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d058      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 800243c:	4a96      	ldr	r2, [pc, #600]	; (8002698 <HAL_GPIO_Init+0x2a4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d86f      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002442:	4a96      	ldr	r2, [pc, #600]	; (800269c <HAL_GPIO_Init+0x2a8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d052      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002448:	4a94      	ldr	r2, [pc, #592]	; (800269c <HAL_GPIO_Init+0x2a8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d869      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800244e:	4a94      	ldr	r2, [pc, #592]	; (80026a0 <HAL_GPIO_Init+0x2ac>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d04c      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002454:	4a92      	ldr	r2, [pc, #584]	; (80026a0 <HAL_GPIO_Init+0x2ac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d863      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800245a:	4a92      	ldr	r2, [pc, #584]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d046      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002460:	4a90      	ldr	r2, [pc, #576]	; (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d85d      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002466:	2b12      	cmp	r3, #18
 8002468:	d82a      	bhi.n	80024c0 <HAL_GPIO_Init+0xcc>
 800246a:	2b12      	cmp	r3, #18
 800246c:	d859      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800246e:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <HAL_GPIO_Init+0x80>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	080024ef 	.word	0x080024ef
 8002478:	080024c9 	.word	0x080024c9
 800247c:	080024db 	.word	0x080024db
 8002480:	0800251d 	.word	0x0800251d
 8002484:	08002523 	.word	0x08002523
 8002488:	08002523 	.word	0x08002523
 800248c:	08002523 	.word	0x08002523
 8002490:	08002523 	.word	0x08002523
 8002494:	08002523 	.word	0x08002523
 8002498:	08002523 	.word	0x08002523
 800249c:	08002523 	.word	0x08002523
 80024a0:	08002523 	.word	0x08002523
 80024a4:	08002523 	.word	0x08002523
 80024a8:	08002523 	.word	0x08002523
 80024ac:	08002523 	.word	0x08002523
 80024b0:	08002523 	.word	0x08002523
 80024b4:	08002523 	.word	0x08002523
 80024b8:	080024d1 	.word	0x080024d1
 80024bc:	080024e5 	.word	0x080024e5
 80024c0:	4a79      	ldr	r2, [pc, #484]	; (80026a8 <HAL_GPIO_Init+0x2b4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024c6:	e02c      	b.n	8002522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	623b      	str	r3, [r7, #32]
          break;
 80024ce:	e029      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	3304      	adds	r3, #4
 80024d6:	623b      	str	r3, [r7, #32]
          break;
 80024d8:	e024      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	3308      	adds	r3, #8
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e01f      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	330c      	adds	r3, #12
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e01a      	b.n	8002524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024f6:	2304      	movs	r3, #4
 80024f8:	623b      	str	r3, [r7, #32]
          break;
 80024fa:	e013      	b.n	8002524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002504:	2308      	movs	r3, #8
 8002506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	611a      	str	r2, [r3, #16]
          break;
 800250e:	e009      	b.n	8002524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002510:	2308      	movs	r3, #8
 8002512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	615a      	str	r2, [r3, #20]
          break;
 800251a:	e003      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
          break;
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x130>
          break;
 8002522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2bff      	cmp	r3, #255	; 0xff
 8002528:	d801      	bhi.n	800252e <HAL_GPIO_Init+0x13a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	e001      	b.n	8002532 <HAL_GPIO_Init+0x13e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2bff      	cmp	r3, #255	; 0xff
 8002538:	d802      	bhi.n	8002540 <HAL_GPIO_Init+0x14c>
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	e002      	b.n	8002546 <HAL_GPIO_Init+0x152>
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	3b08      	subs	r3, #8
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	210f      	movs	r1, #15
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	401a      	ands	r2, r3
 8002558:	6a39      	ldr	r1, [r7, #32]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	431a      	orrs	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80b1 	beq.w	80026d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002574:	4b4d      	ldr	r3, [pc, #308]	; (80026ac <HAL_GPIO_Init+0x2b8>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a4c      	ldr	r2, [pc, #304]	; (80026ac <HAL_GPIO_Init+0x2b8>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_GPIO_Init+0x2b8>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800258c:	4a48      	ldr	r2, [pc, #288]	; (80026b0 <HAL_GPIO_Init+0x2bc>)
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a40      	ldr	r2, [pc, #256]	; (80026b4 <HAL_GPIO_Init+0x2c0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_GPIO_Init+0x1ec>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3f      	ldr	r2, [pc, #252]	; (80026b8 <HAL_GPIO_Init+0x2c4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00d      	beq.n	80025dc <HAL_GPIO_Init+0x1e8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3e      	ldr	r2, [pc, #248]	; (80026bc <HAL_GPIO_Init+0x2c8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1e4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3d      	ldr	r2, [pc, #244]	; (80026c0 <HAL_GPIO_Init+0x2cc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_GPIO_Init+0x1e0>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e006      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e004      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025d8:	2302      	movs	r3, #2
 80025da:	e002      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	4093      	lsls	r3, r2
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025f2:	492f      	ldr	r1, [pc, #188]	; (80026b0 <HAL_GPIO_Init+0x2bc>)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260c:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	492c      	ldr	r1, [pc, #176]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261a:	4b2a      	ldr	r3, [pc, #168]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	43db      	mvns	r3, r3
 8002622:	4928      	ldr	r1, [pc, #160]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002624:	4013      	ands	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002634:	4b23      	ldr	r3, [pc, #140]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4922      	ldr	r1, [pc, #136]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	43db      	mvns	r3, r3
 800264a:	491e      	ldr	r1, [pc, #120]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 800264c:	4013      	ands	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4918      	ldr	r1, [pc, #96]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	43db      	mvns	r3, r3
 8002672:	4914      	ldr	r1, [pc, #80]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002674:	4013      	ands	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d021      	beq.n	80026c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e021      	b.n	80026d6 <HAL_GPIO_Init+0x2e2>
 8002692:	bf00      	nop
 8002694:	10320000 	.word	0x10320000
 8002698:	10310000 	.word	0x10310000
 800269c:	10220000 	.word	0x10220000
 80026a0:	10210000 	.word	0x10210000
 80026a4:	10120000 	.word	0x10120000
 80026a8:	10110000 	.word	0x10110000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40011400 	.word	0x40011400
 80026c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_GPIO_Init+0x304>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	4909      	ldr	r1, [pc, #36]	; (80026f8 <HAL_GPIO_Init+0x304>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	3301      	adds	r3, #1
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f47f ae8e 	bne.w	8002408 <HAL_GPIO_Init+0x14>
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	372c      	adds	r7, #44	; 0x2c
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40010400 	.word	0x40010400

080026fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
 8002736:	4613      	mov	r3, r2
 8002738:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800273a:	787b      	ldrb	r3, [r7, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002740:	887a      	ldrh	r2, [r7, #2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002746:	e003      	b.n	8002750 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	041a      	lsls	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	611a      	str	r2, [r3, #16]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
	...

0800275c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e12b      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff f870 	bl	8001868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c0:	f001 fbf2 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a81      	ldr	r2, [pc, #516]	; (80029d0 <HAL_I2C_Init+0x274>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d807      	bhi.n	80027e0 <HAL_I2C_Init+0x84>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a80      	ldr	r2, [pc, #512]	; (80029d4 <HAL_I2C_Init+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e006      	b.n	80027ee <HAL_I2C_Init+0x92>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a7d      	ldr	r2, [pc, #500]	; (80029d8 <HAL_I2C_Init+0x27c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0e7      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a78      	ldr	r2, [pc, #480]	; (80029dc <HAL_I2C_Init+0x280>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a6a      	ldr	r2, [pc, #424]	; (80029d0 <HAL_I2C_Init+0x274>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d802      	bhi.n	8002830 <HAL_I2C_Init+0xd4>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	e009      	b.n	8002844 <HAL_I2C_Init+0xe8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a69      	ldr	r2, [pc, #420]	; (80029e0 <HAL_I2C_Init+0x284>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	3301      	adds	r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	495c      	ldr	r1, [pc, #368]	; (80029d0 <HAL_I2C_Init+0x274>)
 8002860:	428b      	cmp	r3, r1
 8002862:	d819      	bhi.n	8002898 <HAL_I2C_Init+0x13c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e59      	subs	r1, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002878:	400b      	ands	r3, r1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_I2C_Init+0x138>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e59      	subs	r1, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fbb1 f3f3 	udiv	r3, r1, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	e051      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002894:	2304      	movs	r3, #4
 8002896:	e04f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_I2C_Init+0x168>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e012      	b.n	80028ea <HAL_I2C_Init+0x18e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Init+0x196>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e022      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10e      	bne.n	8002918 <HAL_I2C_Init+0x1bc>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e58      	subs	r0, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	fbb0 f3f3 	udiv	r3, r0, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6809      	ldr	r1, [r1, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6911      	ldr	r1, [r2, #16]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	000186a0 	.word	0x000186a0
 80029d4:	001e847f 	.word	0x001e847f
 80029d8:	003d08ff 	.word	0x003d08ff
 80029dc:	431bde83 	.word	0x431bde83
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	4608      	mov	r0, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	4603      	mov	r3, r0
 80029f4:	817b      	strh	r3, [r7, #10]
 80029f6:	460b      	mov	r3, r1
 80029f8:	813b      	strh	r3, [r7, #8]
 80029fa:	4613      	mov	r3, r2
 80029fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029fe:	f7ff f9ab 	bl	8001d58 <HAL_GetTick>
 8002a02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	f040 80d9 	bne.w	8002bc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2319      	movs	r3, #25
 8002a18:	2201      	movs	r2, #1
 8002a1a:	496d      	ldr	r1, [pc, #436]	; (8002bd0 <HAL_I2C_Mem_Write+0x1ec>)
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fcc1 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e0cc      	b.n	8002bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_I2C_Mem_Write+0x56>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e0c5      	b.n	8002bc6 <HAL_I2C_Mem_Write+0x1e2>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d007      	beq.n	8002a60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2221      	movs	r2, #33	; 0x21
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_I2C_Mem_Write+0x1f0>)
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aa2:	88f8      	ldrh	r0, [r7, #6]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	8979      	ldrh	r1, [r7, #10]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 faf8 	bl	80030a8 <I2C_RequestMemoryWrite>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d052      	beq.n	8002b64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e081      	b.n	8002bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fd86 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d107      	bne.n	8002aea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06b      	b.n	8002bc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	781a      	ldrb	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d11b      	bne.n	8002b64 <HAL_I2C_Mem_Write+0x180>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	781a      	ldrb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1aa      	bne.n	8002ac2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fd79 	bl	8003668 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d107      	bne.n	8002b94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e016      	b.n	8002bc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	00100002 	.word	0x00100002
 8002bd4:	ffff0000 	.word	0xffff0000

08002bd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08c      	sub	sp, #48	; 0x30
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	817b      	strh	r3, [r7, #10]
 8002bea:	460b      	mov	r3, r1
 8002bec:	813b      	strh	r3, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf6:	f7ff f8af 	bl	8001d58 <HAL_GetTick>
 8002bfa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	f040 8244 	bne.w	8003092 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2319      	movs	r3, #25
 8002c10:	2201      	movs	r2, #1
 8002c12:	4982      	ldr	r1, [pc, #520]	; (8002e1c <HAL_I2C_Mem_Read+0x244>)
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fbc5 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
 8002c22:	e237      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Mem_Read+0x5a>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e230      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d007      	beq.n	8002c58 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2222      	movs	r2, #34	; 0x22
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a62      	ldr	r2, [pc, #392]	; (8002e20 <HAL_I2C_Mem_Read+0x248>)
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9a:	88f8      	ldrh	r0, [r7, #6]
 8002c9c:	893a      	ldrh	r2, [r7, #8]
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4603      	mov	r3, r0
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fa92 	bl	80031d4 <I2C_RequestMemoryRead>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1ec      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d113      	bne.n	8002cea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e1c0      	b.n	800306c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d11e      	bne.n	8002d30 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d02:	b672      	cpsid	i
}
 8002d04:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d2c:	b662      	cpsie	i
}
 8002d2e:	e035      	b.n	8002d9c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d11e      	bne.n	8002d76 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d48:	b672      	cpsid	i
}
 8002d4a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d72:	b662      	cpsie	i
}
 8002d74:	e012      	b.n	8002d9c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d84:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002d9c:	e166      	b.n	800306c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da2:	2b03      	cmp	r3, #3
 8002da4:	f200 811f 	bhi.w	8002fe6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d123      	bne.n	8002df8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fc9f 	bl	80036f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e167      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002df6:	e139      	b.n	800306c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d152      	bne.n	8002ea6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	2200      	movs	r2, #0
 8002e08:	4906      	ldr	r1, [pc, #24]	; (8002e24 <HAL_I2C_Mem_Read+0x24c>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 faca 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e13c      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
 8002e1a:	bf00      	nop
 8002e1c:	00100002 	.word	0x00100002
 8002e20:	ffff0000 	.word	0xffff0000
 8002e24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002e28:	b672      	cpsid	i
}
 8002e2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e6e:	b662      	cpsie	i
}
 8002e70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ea4:	e0e2      	b.n	800306c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	2200      	movs	r2, #0
 8002eae:	497b      	ldr	r1, [pc, #492]	; (800309c <HAL_I2C_Mem_Read+0x4c4>)
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fa77 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0e9      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ece:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ed0:	b672      	cpsid	i
}
 8002ed2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f06:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_I2C_Mem_Read+0x4c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	08db      	lsrs	r3, r3, #3
 8002f0c:	4a65      	ldr	r2, [pc, #404]	; (80030a4 <HAL_I2C_Mem_Read+0x4cc>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0a1a      	lsrs	r2, r3, #8
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	00da      	lsls	r2, r3, #3
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d118      	bne.n	8002f5e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f043 0220 	orr.w	r2, r3, #32
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002f4e:	b662      	cpsie	i
}
 8002f50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e09a      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d1d9      	bne.n	8002f20 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002fae:	b662      	cpsie	i
}
 8002fb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fe4:	e042      	b.n	800306c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fb84 	bl	80036f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e04c      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	b2d2      	uxtb	r2, r2
 8003006:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d118      	bne.n	800306c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	2b00      	cmp	r3, #0
 8003072:	f47f ae94 	bne.w	8002d9e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2220      	movs	r2, #32
 800307a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	00010004 	.word	0x00010004
 80030a0:	20000010 	.word	0x20000010
 80030a4:	14f8b589 	.word	0x14f8b589

080030a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	817b      	strh	r3, [r7, #10]
 80030ba:	460b      	mov	r3, r1
 80030bc:	813b      	strh	r3, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	2200      	movs	r2, #0
 80030da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f960 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f8:	d103      	bne.n	8003102 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e05f      	b.n	80031c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003114:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	492d      	ldr	r1, [pc, #180]	; (80031d0 <I2C_RequestMemoryWrite+0x128>)
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f9bb 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e04c      	b.n	80031c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312c:	2300      	movs	r3, #0
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003144:	6a39      	ldr	r1, [r7, #32]
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fa46 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	2b04      	cmp	r3, #4
 8003158:	d107      	bne.n	800316a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003168:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e02b      	b.n	80031c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d105      	bne.n	8003180 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003174:	893b      	ldrh	r3, [r7, #8]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	611a      	str	r2, [r3, #16]
 800317e:	e021      	b.n	80031c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003180:	893b      	ldrh	r3, [r7, #8]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	b29b      	uxth	r3, r3
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003190:	6a39      	ldr	r1, [r7, #32]
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fa20 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d107      	bne.n	80031b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e005      	b.n	80031c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ba:	893b      	ldrh	r3, [r7, #8]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	00010002 	.word	0x00010002

080031d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	4608      	mov	r0, r1
 80031de:	4611      	mov	r1, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	817b      	strh	r3, [r7, #10]
 80031e6:	460b      	mov	r3, r1
 80031e8:	813b      	strh	r3, [r7, #8]
 80031ea:	4613      	mov	r3, r2
 80031ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800320c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	2200      	movs	r2, #0
 8003216:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f8c2 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003234:	d103      	bne.n	800323e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0aa      	b.n	8003398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003242:	897b      	ldrh	r3, [r7, #10]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003250:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	6a3a      	ldr	r2, [r7, #32]
 8003256:	4952      	ldr	r1, [pc, #328]	; (80033a0 <I2C_RequestMemoryRead+0x1cc>)
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f91d 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e097      	b.n	8003398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800327e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003280:	6a39      	ldr	r1, [r7, #32]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f9a8 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00d      	beq.n	80032aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b04      	cmp	r3, #4
 8003294:	d107      	bne.n	80032a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e076      	b.n	8003398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032aa:	88fb      	ldrh	r3, [r7, #6]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032b0:	893b      	ldrh	r3, [r7, #8]
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	611a      	str	r2, [r3, #16]
 80032ba:	e021      	b.n	8003300 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032bc:	893b      	ldrh	r3, [r7, #8]
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032cc:	6a39      	ldr	r1, [r7, #32]
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f982 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00d      	beq.n	80032f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d107      	bne.n	80032f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e050      	b.n	8003398 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032f6:	893b      	ldrh	r3, [r7, #8]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003302:	6a39      	ldr	r1, [r7, #32]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f967 	bl	80035d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	2b04      	cmp	r3, #4
 8003316:	d107      	bne.n	8003328 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003326:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e035      	b.n	8003398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800333a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	2200      	movs	r2, #0
 8003344:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f82b 	bl	80033a4 <I2C_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00d      	beq.n	8003370 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003362:	d103      	bne.n	800336c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e013      	b.n	8003398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	4906      	ldr	r1, [pc, #24]	; (80033a0 <I2C_RequestMemoryRead+0x1cc>)
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f886 	bl	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3718      	adds	r7, #24
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	00010002 	.word	0x00010002

080033a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	603b      	str	r3, [r7, #0]
 80033b0:	4613      	mov	r3, r2
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033b4:	e048      	b.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d044      	beq.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe fccb 	bl	8001d58 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d139      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	0c1b      	lsrs	r3, r3, #16
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d10d      	bne.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	43da      	mvns	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4013      	ands	r3, r2
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	e00c      	b.n	8003414 <I2C_WaitOnFlagUntilTimeout+0x70>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	429a      	cmp	r2, r3
 8003418:	d116      	bne.n	8003448 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e023      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10d      	bne.n	800346e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	e00c      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	429a      	cmp	r2, r3
 800348c:	d093      	beq.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a6:	e071      	b.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d123      	bne.n	8003500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f043 0204 	orr.w	r2, r3, #4
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e067      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d041      	beq.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fe fc26 	bl	8001d58 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d136      	bne.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0c1b      	lsrs	r3, r3, #16
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10c      	bne.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4013      	ands	r3, r2
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	bf14      	ite	ne
 800353a:	2301      	movne	r3, #1
 800353c:	2300      	moveq	r3, #0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	e00b      	b.n	800355a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	43da      	mvns	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	bf14      	ite	ne
 8003554:	2301      	movne	r3, #1
 8003556:	2300      	moveq	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d016      	beq.n	800358c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	f043 0220 	orr.w	r2, r3, #32
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e021      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b01      	cmp	r3, #1
 8003594:	d10c      	bne.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	43da      	mvns	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	4013      	ands	r3, r2
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	bf14      	ite	ne
 80035a8:	2301      	movne	r3, #1
 80035aa:	2300      	moveq	r3, #0
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	e00b      	b.n	80035c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	43da      	mvns	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4013      	ands	r3, r2
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f47f af6d 	bne.w	80034a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e4:	e034      	b.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f8e3 	bl	80037b2 <I2C_IsAcknowledgeFailed>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e034      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d028      	beq.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fe fbab 	bl	8001d58 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11d      	bne.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361e:	2b80      	cmp	r3, #128	; 0x80
 8003620:	d016      	beq.n	8003650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b80      	cmp	r3, #128	; 0x80
 800365c:	d1c3      	bne.n	80035e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003674:	e034      	b.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 f89b 	bl	80037b2 <I2C_IsAcknowledgeFailed>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e034      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d028      	beq.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368e:	f7fe fb63 	bl	8001d58 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11d      	bne.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0304 	and.w	r3, r3, #4
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d016      	beq.n	80036e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d1c3      	bne.n	8003676 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003704:	e049      	b.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b10      	cmp	r3, #16
 8003712:	d119      	bne.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f06f 0210 	mvn.w	r2, #16
 800371c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e030      	b.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003748:	f7fe fb06 	bl	8001d58 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d11d      	bne.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d016      	beq.n	800379a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e007      	b.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d1ae      	bne.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d11b      	bne.n	8003802 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0204 	orr.w	r2, r3, #4
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
	...

08003810 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e272      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8087 	beq.w	800393e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003830:	4b92      	ldr	r3, [pc, #584]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b04      	cmp	r3, #4
 800383a:	d00c      	beq.n	8003856 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800383c:	4b8f      	ldr	r3, [pc, #572]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d112      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
 8003848:	4b8c      	ldr	r3, [pc, #560]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	d10b      	bne.n	800386e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003856:	4b89      	ldr	r3, [pc, #548]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d06c      	beq.n	800393c <HAL_RCC_OscConfig+0x12c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d168      	bne.n	800393c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e24c      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x76>
 8003878:	4b80      	ldr	r3, [pc, #512]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a7f      	ldr	r2, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e02e      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b7b      	ldr	r3, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7a      	ldr	r2, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a77      	ldr	r2, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0xbc>
 80038b2:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a71      	ldr	r2, [pc, #452]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6e      	ldr	r2, [pc, #440]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xd4>
 80038cc:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6a      	ldr	r2, [pc, #424]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b68      	ldr	r3, [pc, #416]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a67      	ldr	r2, [pc, #412]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fa34 	bl	8001d58 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fa30 	bl	8001d58 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e200      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xe4>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fa20 	bl	8001d58 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe fa1c 	bl	8001d58 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1ec      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x10c>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003956:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
 8003962:	4b46      	ldr	r3, [pc, #280]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1c0      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4939      	ldr	r1, [pc, #228]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039aa:	f7fe f9d5 	bl	8001d58 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fe f9d1 	bl	8001d58 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1a1      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4927      	ldr	r1, [pc, #156]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b26      	ldr	r3, [pc, #152]	; (8003a80 <HAL_RCC_OscConfig+0x270>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe f9b4 	bl	8001d58 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fe f9b0 	bl	8001d58 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e180      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03a      	beq.n	8003a94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d019      	beq.n	8003a5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2c:	f7fe f994 	bl	8001d58 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe f990 	bl	8001d58 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e160      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0d      	ldr	r3, [pc, #52]	; (8003a7c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f000 fabc 	bl	8003fd0 <RCC_Delay>
 8003a58:	e01c      	b.n	8003a94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_RCC_OscConfig+0x274>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a60:	f7fe f97a 	bl	8001d58 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe f976 	bl	8001d58 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d908      	bls.n	8003a88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e146      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	42420000 	.word	0x42420000
 8003a84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b92      	ldr	r3, [pc, #584]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1e9      	bne.n	8003a68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a6 	beq.w	8003bee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa6:	4b8b      	ldr	r3, [pc, #556]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10d      	bne.n	8003ace <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab2:	4b88      	ldr	r3, [pc, #544]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	61d3      	str	r3, [r2, #28]
 8003abe:	4b85      	ldr	r3, [pc, #532]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b82      	ldr	r3, [pc, #520]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d118      	bne.n	8003b0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ada:	4b7f      	ldr	r3, [pc, #508]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7e      	ldr	r2, [pc, #504]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe f937 	bl	8001d58 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	e008      	b.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aee:	f7fe f933 	bl	8001d58 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	2b64      	cmp	r3, #100	; 0x64
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e103      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <HAL_RCC_OscConfig+0x4c8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0f0      	beq.n	8003aee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d106      	bne.n	8003b22 <HAL_RCC_OscConfig+0x312>
 8003b14:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4a6e      	ldr	r2, [pc, #440]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	e02d      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10c      	bne.n	8003b44 <HAL_RCC_OscConfig+0x334>
 8003b2a:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4a69      	ldr	r2, [pc, #420]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6213      	str	r3, [r2, #32]
 8003b36:	4b67      	ldr	r3, [pc, #412]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a66      	ldr	r2, [pc, #408]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	e01c      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCC_OscConfig+0x356>
 8003b4c:	4b61      	ldr	r3, [pc, #388]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4a60      	ldr	r2, [pc, #384]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b52:	f043 0304 	orr.w	r3, r3, #4
 8003b56:	6213      	str	r3, [r2, #32]
 8003b58:	4b5e      	ldr	r3, [pc, #376]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	e00b      	b.n	8003b7e <HAL_RCC_OscConfig+0x36e>
 8003b66:	4b5b      	ldr	r3, [pc, #364]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a5a      	ldr	r2, [pc, #360]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	4b58      	ldr	r3, [pc, #352]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	4a57      	ldr	r2, [pc, #348]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f023 0304 	bic.w	r3, r3, #4
 8003b7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d015      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fe f8e7 	bl	8001d58 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fe f8e3 	bl	8001d58 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e0b1      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ee      	beq.n	8003b8e <HAL_RCC_OscConfig+0x37e>
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb2:	f7fe f8d1 	bl	8001d58 <HAL_GetTick>
 8003bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fe f8cd 	bl	8001d58 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e09b      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd0:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1ee      	bne.n	8003bba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d105      	bne.n	8003bee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be2:	4b3c      	ldr	r3, [pc, #240]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4a3b      	ldr	r2, [pc, #236]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 8087 	beq.w	8003d06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf8:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 030c 	and.w	r3, r3, #12
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d061      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d146      	bne.n	8003c9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c12:	f7fe f8a1 	bl	8001d58 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1a:	f7fe f89d 	bl	8001d58 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e06d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2c:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4921      	ldr	r1, [pc, #132]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a19      	ldr	r1, [r3, #32]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	430b      	orrs	r3, r1
 8003c66:	491b      	ldr	r1, [pc, #108]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	; (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fe f871 	bl	8001d58 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7fe f86d 	bl	8001d58 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e03d      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x46a>
 8003c98:	e035      	b.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <HAL_RCC_OscConfig+0x4cc>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe f85a 	bl	8001d58 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fe f856 	bl	8001d58 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e026      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x498>
 8003cc6:	e01e      	b.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d107      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e019      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCC_OscConfig+0x500>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000

08003d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0d0      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b6a      	ldr	r3, [pc, #424]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b67      	ldr	r3, [pc, #412]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 0207 	bic.w	r2, r3, #7
 8003d3e:	4965      	ldr	r1, [pc, #404]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b63      	ldr	r3, [pc, #396]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b8      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d70:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a58      	ldr	r2, [pc, #352]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d88:	4b53      	ldr	r3, [pc, #332]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a52      	ldr	r2, [pc, #328]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b50      	ldr	r3, [pc, #320]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	494d      	ldr	r1, [pc, #308]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d040      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e07f      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e073      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06b      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4936      	ldr	r1, [pc, #216]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fd ffa8 	bl	8001d58 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fd ffa4 	bl	8001d58 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e053      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d210      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b24      	ldr	r3, [pc, #144]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4922      	ldr	r1, [pc, #136]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e032      	b.n	8003eca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4916      	ldr	r1, [pc, #88]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8e:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	490e      	ldr	r1, [pc, #56]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea2:	f000 f821 	bl	8003ee8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	490a      	ldr	r1, [pc, #40]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ebe:	4b09      	ldr	r3, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fd ff06 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40022000 	.word	0x40022000
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	08005edc 	.word	0x08005edc
 8003ee0:	20000010 	.word	0x20000010
 8003ee4:	20000014 	.word	0x20000014

08003ee8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 030c 	and.w	r3, r3, #12
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d002      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x30>
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0x36>
 8003f16:	e027      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f18:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1a:	613b      	str	r3, [r7, #16]
      break;
 8003f1c:	e027      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	0c9b      	lsrs	r3, r3, #18
 8003f22:	f003 030f 	and.w	r3, r3, #15
 8003f26:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f28:	5cd3      	ldrb	r3, [r2, r3]
 8003f2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d010      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f36:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x94>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	0c5b      	lsrs	r3, r3, #17
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f42:	5cd3      	ldrb	r3, [r2, r3]
 8003f44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f4a:	fb03 f202 	mul.w	r2, r3, r2
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	e004      	b.n	8003f62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a0c      	ldr	r2, [pc, #48]	; (8003f8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	613b      	str	r3, [r7, #16]
      break;
 8003f66:	e002      	b.n	8003f6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003f6a:	613b      	str	r3, [r7, #16]
      break;
 8003f6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6e:	693b      	ldr	r3, [r7, #16]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	08005ef4 	.word	0x08005ef4
 8003f88:	08005f04 	.word	0x08005f04
 8003f8c:	003d0900 	.word	0x003d0900
 8003f90:	007a1200 	.word	0x007a1200

08003f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f98:	4b02      	ldr	r3, [pc, #8]	; (8003fa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	20000010 	.word	0x20000010

08003fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fac:	f7ff fff2 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4903      	ldr	r1, [pc, #12]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08005eec 	.word	0x08005eec

08003fd0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <RCC_Delay+0x34>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <RCC_Delay+0x38>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a5b      	lsrs	r3, r3, #9
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fec:	bf00      	nop
  }
  while (Delay --);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e5a      	subs	r2, r3, #1
 8003ff2:	60fa      	str	r2, [r7, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f9      	bne.n	8003fec <RCC_Delay+0x1c>
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	20000010 	.word	0x20000010
 8004008:	10624dd3 	.word	0x10624dd3

0800400c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d07d      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004028:	2300      	movs	r3, #0
 800402a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402c:	4b4f      	ldr	r3, [pc, #316]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10d      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b4c      	ldr	r3, [pc, #304]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4a4b      	ldr	r2, [pc, #300]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800403e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004042:	61d3      	str	r3, [r2, #28]
 8004044:	4b49      	ldr	r3, [pc, #292]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	4b46      	ldr	r3, [pc, #280]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d118      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004060:	4b43      	ldr	r3, [pc, #268]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a42      	ldr	r2, [pc, #264]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406c:	f7fd fe74 	bl	8001d58 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	e008      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004074:	f7fd fe70 	bl	8001d58 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e06d      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004086:	4b3a      	ldr	r3, [pc, #232]	; (8004170 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004092:	4b36      	ldr	r3, [pc, #216]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d02e      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d027      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040b0:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ba:	4b2e      	ldr	r3, [pc, #184]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040bc:	2201      	movs	r2, #1
 80040be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040c0:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80040c6:	4a29      	ldr	r2, [pc, #164]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d014      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fd fe3f 	bl	8001d58 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd fe3b 	bl	8001d58 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e036      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ee      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	4917      	ldr	r1, [pc, #92]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	4313      	orrs	r3, r2
 8004110:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d105      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004118:	4b14      	ldr	r3, [pc, #80]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	69db      	ldr	r3, [r3, #28]
 800411c:	4a13      	ldr	r2, [pc, #76]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004122:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d008      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	490b      	ldr	r1, [pc, #44]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413e:	4313      	orrs	r3, r2
 8004140:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0310 	and.w	r3, r3, #16
 800414a:	2b00      	cmp	r3, #0
 800414c:	d008      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4904      	ldr	r1, [pc, #16]	; (800416c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415c:	4313      	orrs	r3, r2
 800415e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40021000 	.word	0x40021000
 8004170:	40007000 	.word	0x40007000
 8004174:	42420440 	.word	0x42420440

08004178 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e076      	b.n	8004278 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	d108      	bne.n	80041a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800419a:	d009      	beq.n	80041b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	61da      	str	r2, [r3, #28]
 80041a2:	e005      	b.n	80041b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd fbb8 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	ea42 0103 	orr.w	r1, r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	0c1a      	lsrs	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f002 0204 	and.w	r2, r2, #4
 8004256:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004266:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3708      	adds	r7, #8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e041      	b.n	8004316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd fb96 	bl	80019d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fc30 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b01      	cmp	r3, #1
 8004332:	d001      	beq.n	8004338 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e03a      	b.n	80043ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_TIM_Base_Start_IT+0x98>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x58>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d009      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x58>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a14      	ldr	r2, [pc, #80]	; (80043bc <HAL_TIM_Base_Start_IT+0x9c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIM_Base_Start_IT+0x58>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d111      	bne.n	800439c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b06      	cmp	r3, #6
 8004388:	d010      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439a:	e007      	b.n	80043ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bc80      	pop	{r7}
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800

080043c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e041      	b.n	800445a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d106      	bne.n	80043f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f839 	bl	8004462 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f000 fb8e 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <HAL_TIM_PWM_Start+0x24>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	bf14      	ite	ne
 8004490:	2301      	movne	r3, #1
 8004492:	2300      	moveq	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	e022      	b.n	80044de <HAL_TIM_PWM_Start+0x6a>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b04      	cmp	r3, #4
 800449c:	d109      	bne.n	80044b2 <HAL_TIM_PWM_Start+0x3e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	bf14      	ite	ne
 80044aa:	2301      	movne	r3, #1
 80044ac:	2300      	moveq	r3, #0
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	e015      	b.n	80044de <HAL_TIM_PWM_Start+0x6a>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d109      	bne.n	80044cc <HAL_TIM_PWM_Start+0x58>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	bf14      	ite	ne
 80044c4:	2301      	movne	r3, #1
 80044c6:	2300      	moveq	r3, #0
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	e008      	b.n	80044de <HAL_TIM_PWM_Start+0x6a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e05e      	b.n	80045a4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d104      	bne.n	80044f6 <HAL_TIM_PWM_Start+0x82>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f4:	e013      	b.n	800451e <HAL_TIM_PWM_Start+0xaa>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d104      	bne.n	8004506 <HAL_TIM_PWM_Start+0x92>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004504:	e00b      	b.n	800451e <HAL_TIM_PWM_Start+0xaa>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b08      	cmp	r3, #8
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Start+0xa2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004514:	e003      	b.n	800451e <HAL_TIM_PWM_Start+0xaa>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2202      	movs	r2, #2
 800451a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	6839      	ldr	r1, [r7, #0]
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fd7c 	bl	8005024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a1e      	ldr	r2, [pc, #120]	; (80045ac <HAL_TIM_PWM_Start+0x138>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d107      	bne.n	8004546 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004544:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a18      	ldr	r2, [pc, #96]	; (80045ac <HAL_TIM_PWM_Start+0x138>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00e      	beq.n	800456e <HAL_TIM_PWM_Start+0xfa>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004558:	d009      	beq.n	800456e <HAL_TIM_PWM_Start+0xfa>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <HAL_TIM_PWM_Start+0x13c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d004      	beq.n	800456e <HAL_TIM_PWM_Start+0xfa>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <HAL_TIM_PWM_Start+0x140>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d111      	bne.n	8004592 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b06      	cmp	r3, #6
 800457e:	d010      	beq.n	80045a2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004590:	e007      	b.n	80045a2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40012c00 	.word	0x40012c00
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800

080045b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d122      	bne.n	8004614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d11b      	bne.n	8004614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0202 	mvn.w	r2, #2
 80045e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fa76 	bl	8004aec <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 fa69 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa78 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b04      	cmp	r3, #4
 8004620:	d122      	bne.n	8004668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b04      	cmp	r3, #4
 800462e:	d11b      	bne.n	8004668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0204 	mvn.w	r2, #4
 8004638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fa4c 	bl	8004aec <HAL_TIM_IC_CaptureCallback>
 8004654:	e005      	b.n	8004662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fa3f 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fa4e 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b08      	cmp	r3, #8
 8004674:	d122      	bne.n	80046bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d11b      	bne.n	80046bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0208 	mvn.w	r2, #8
 800468c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2204      	movs	r2, #4
 8004692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fa22 	bl	8004aec <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fa15 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa24 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b10      	cmp	r3, #16
 80046c8:	d122      	bne.n	8004710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0210 	mvn.w	r2, #16
 80046e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2208      	movs	r2, #8
 80046e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f9f8 	bl	8004aec <HAL_TIM_IC_CaptureCallback>
 80046fc:	e005      	b.n	800470a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f9eb 	bl	8004ada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f9fa 	bl	8004afe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b01      	cmp	r3, #1
 800471c:	d10e      	bne.n	800473c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f06f 0201 	mvn.w	r2, #1
 8004734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fd f812 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b80      	cmp	r3, #128	; 0x80
 8004748:	d10e      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b80      	cmp	r3, #128	; 0x80
 8004756:	d107      	bne.n	8004768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fd3a 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004772:	2b40      	cmp	r3, #64	; 0x40
 8004774:	d10e      	bne.n	8004794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b40      	cmp	r3, #64	; 0x40
 8004782:	d107      	bne.n	8004794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9be 	bl	8004b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d10e      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d107      	bne.n	80047c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f06f 0220 	mvn.w	r2, #32
 80047b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fd05 	bl	80051ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e0ae      	b.n	8004944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	f200 809f 	bhi.w	8004934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004831 	.word	0x08004831
 8004800:	08004935 	.word	0x08004935
 8004804:	08004935 	.word	0x08004935
 8004808:	08004935 	.word	0x08004935
 800480c:	08004871 	.word	0x08004871
 8004810:	08004935 	.word	0x08004935
 8004814:	08004935 	.word	0x08004935
 8004818:	08004935 	.word	0x08004935
 800481c:	080048b3 	.word	0x080048b3
 8004820:	08004935 	.word	0x08004935
 8004824:	08004935 	.word	0x08004935
 8004828:	08004935 	.word	0x08004935
 800482c:	080048f3 	.word	0x080048f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f9d6 	bl	8004be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0208 	orr.w	r2, r2, #8
 800484a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0204 	bic.w	r2, r2, #4
 800485a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6999      	ldr	r1, [r3, #24]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	619a      	str	r2, [r3, #24]
      break;
 800486e:	e064      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68b9      	ldr	r1, [r7, #8]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fa1c 	bl	8004cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699a      	ldr	r2, [r3, #24]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800488a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800489a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6999      	ldr	r1, [r3, #24]
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	619a      	str	r2, [r3, #24]
      break;
 80048b0:	e043      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fa65 	bl	8004d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69da      	ldr	r2, [r3, #28]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0208 	orr.w	r2, r2, #8
 80048cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0204 	bic.w	r2, r2, #4
 80048dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	69d9      	ldr	r1, [r3, #28]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	61da      	str	r2, [r3, #28]
      break;
 80048f0:	e023      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 faaf 	bl	8004e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69da      	ldr	r2, [r3, #28]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800490c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69d9      	ldr	r1, [r3, #28]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	61da      	str	r2, [r3, #28]
      break;
 8004932:	e002      	b.n	800493a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
      break;
 8004938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004942:	7dfb      	ldrb	r3, [r7, #23]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIM_ConfigClockSource+0x1c>
 8004964:	2302      	movs	r3, #2
 8004966:	e0b4      	b.n	8004ad2 <HAL_TIM_ConfigClockSource+0x186>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800498e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a0:	d03e      	beq.n	8004a20 <HAL_TIM_ConfigClockSource+0xd4>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049a6:	f200 8087 	bhi.w	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	f000 8086 	beq.w	8004abe <HAL_TIM_ConfigClockSource+0x172>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	d87f      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049b8:	2b70      	cmp	r3, #112	; 0x70
 80049ba:	d01a      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xa6>
 80049bc:	2b70      	cmp	r3, #112	; 0x70
 80049be:	d87b      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c0:	2b60      	cmp	r3, #96	; 0x60
 80049c2:	d050      	beq.n	8004a66 <HAL_TIM_ConfigClockSource+0x11a>
 80049c4:	2b60      	cmp	r3, #96	; 0x60
 80049c6:	d877      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049c8:	2b50      	cmp	r3, #80	; 0x50
 80049ca:	d03c      	beq.n	8004a46 <HAL_TIM_ConfigClockSource+0xfa>
 80049cc:	2b50      	cmp	r3, #80	; 0x50
 80049ce:	d873      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d058      	beq.n	8004a86 <HAL_TIM_ConfigClockSource+0x13a>
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d86f      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049d8:	2b30      	cmp	r3, #48	; 0x30
 80049da:	d064      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049dc:	2b30      	cmp	r3, #48	; 0x30
 80049de:	d86b      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d060      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d867      	bhi.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d05c      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	d05a      	beq.n	8004aa6 <HAL_TIM_ConfigClockSource+0x15a>
 80049f0:	e062      	b.n	8004ab8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f000 faf0 	bl	8004fe6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	609a      	str	r2, [r3, #8]
      break;
 8004a1e:	e04f      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	6899      	ldr	r1, [r3, #8]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f000 fad9 	bl	8004fe6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a42:	609a      	str	r2, [r3, #8]
      break;
 8004a44:	e03c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6818      	ldr	r0, [r3, #0]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	6859      	ldr	r1, [r3, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	461a      	mov	r2, r3
 8004a54:	f000 fa50 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2150      	movs	r1, #80	; 0x50
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 faa7 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a64:	e02c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	461a      	mov	r2, r3
 8004a74:	f000 fa6e 	bl	8004f54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2160      	movs	r1, #96	; 0x60
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fa97 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004a84:	e01c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f000 fa30 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2140      	movs	r1, #64	; 0x40
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fa87 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004aa4:	e00c      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f000 fa7e 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004ab6:	e003      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      break;
 8004abc:	e000      	b.n	8004ac0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004abe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
	...

08004b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a29      	ldr	r2, [pc, #164]	; (8004bdc <TIM_Base_SetConfig+0xb8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <TIM_Base_SetConfig+0xbc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <TIM_Base_SetConfig+0xc0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <TIM_Base_SetConfig+0xb8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d007      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <TIM_Base_SetConfig+0xbc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <TIM_Base_SetConfig+0xc0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d108      	bne.n	8004b98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <TIM_Base_SetConfig+0xb8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d103      	bne.n	8004bcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	615a      	str	r2, [r3, #20]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800

08004be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f023 0201 	bic.w	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 0302 	bic.w	r3, r3, #2
 8004c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <TIM_OC1_SetConfig+0xc8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10c      	bne.n	8004c5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0308 	bic.w	r3, r3, #8
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <TIM_OC1_SetConfig+0xc8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d111      	bne.n	8004c8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40012c00 	.word	0x40012c00

08004cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f023 0210 	bic.w	r2, r3, #16
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0320 	bic.w	r3, r3, #32
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <TIM_OC2_SetConfig+0xd0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10d      	bne.n	8004d30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <TIM_OC2_SetConfig+0xd0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d113      	bne.n	8004d60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00

08004d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10d      	bne.n	8004e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d113      	bne.n	8004e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00

08004e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <TIM_OC4_SetConfig+0x98>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	40012c00 	.word	0x40012c00

08004ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	031b      	lsls	r3, r3, #12
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f043 0307 	orr.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b087      	sub	sp, #28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005000:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	021a      	lsls	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	431a      	orrs	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4313      	orrs	r3, r2
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	609a      	str	r2, [r3, #8]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2201      	movs	r2, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e046      	b.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a16      	ldr	r2, [pc, #88]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d009      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a10      	ldr	r2, [pc, #64]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10c      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800

08005128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005140:	2302      	movs	r3, #2
 8005142:	e03d      	b.n	80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <_ZdlPvj>:
 80051ee:	f000 b818 	b.w	8005222 <_ZdlPv>

080051f2 <_ZdaPv>:
 80051f2:	f000 b816 	b.w	8005222 <_ZdlPv>

080051f6 <_Znwj>:
 80051f6:	2801      	cmp	r0, #1
 80051f8:	bf38      	it	cc
 80051fa:	2001      	movcc	r0, #1
 80051fc:	b510      	push	{r4, lr}
 80051fe:	4604      	mov	r4, r0
 8005200:	4620      	mov	r0, r4
 8005202:	f000 f85d 	bl	80052c0 <malloc>
 8005206:	b930      	cbnz	r0, 8005216 <_Znwj+0x20>
 8005208:	f000 f820 	bl	800524c <_ZSt15get_new_handlerv>
 800520c:	b908      	cbnz	r0, 8005212 <_Znwj+0x1c>
 800520e:	f000 f825 	bl	800525c <abort>
 8005212:	4780      	blx	r0
 8005214:	e7f4      	b.n	8005200 <_Znwj+0xa>
 8005216:	bd10      	pop	{r4, pc}

08005218 <_Znaj>:
 8005218:	f7ff bfed 	b.w	80051f6 <_Znwj>

0800521c <__cxa_pure_virtual>:
 800521c:	b508      	push	{r3, lr}
 800521e:	f000 f80f 	bl	8005240 <_ZSt9terminatev>

08005222 <_ZdlPv>:
 8005222:	f000 b855 	b.w	80052d0 <free>

08005226 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005226:	b508      	push	{r3, lr}
 8005228:	4780      	blx	r0
 800522a:	f000 f817 	bl	800525c <abort>
	...

08005230 <_ZSt13get_terminatev>:
 8005230:	4b02      	ldr	r3, [pc, #8]	; (800523c <_ZSt13get_terminatev+0xc>)
 8005232:	6818      	ldr	r0, [r3, #0]
 8005234:	f3bf 8f5b 	dmb	ish
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	2000001c 	.word	0x2000001c

08005240 <_ZSt9terminatev>:
 8005240:	b508      	push	{r3, lr}
 8005242:	f7ff fff5 	bl	8005230 <_ZSt13get_terminatev>
 8005246:	f7ff ffee 	bl	8005226 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800524c <_ZSt15get_new_handlerv>:
 800524c:	4b02      	ldr	r3, [pc, #8]	; (8005258 <_ZSt15get_new_handlerv+0xc>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	f3bf 8f5b 	dmb	ish
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	200006d4 	.word	0x200006d4

0800525c <abort>:
 800525c:	2006      	movs	r0, #6
 800525e:	b508      	push	{r3, lr}
 8005260:	f000 f95a 	bl	8005518 <raise>
 8005264:	2001      	movs	r0, #1
 8005266:	f7fc fcb2 	bl	8001bce <_exit>
	...

0800526c <__errno>:
 800526c:	4b01      	ldr	r3, [pc, #4]	; (8005274 <__errno+0x8>)
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000020 	.word	0x20000020

08005278 <__libc_init_array>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	2600      	movs	r6, #0
 800527c:	4d0c      	ldr	r5, [pc, #48]	; (80052b0 <__libc_init_array+0x38>)
 800527e:	4c0d      	ldr	r4, [pc, #52]	; (80052b4 <__libc_init_array+0x3c>)
 8005280:	1b64      	subs	r4, r4, r5
 8005282:	10a4      	asrs	r4, r4, #2
 8005284:	42a6      	cmp	r6, r4
 8005286:	d109      	bne.n	800529c <__libc_init_array+0x24>
 8005288:	f000 f978 	bl	800557c <_init>
 800528c:	2600      	movs	r6, #0
 800528e:	4d0a      	ldr	r5, [pc, #40]	; (80052b8 <__libc_init_array+0x40>)
 8005290:	4c0a      	ldr	r4, [pc, #40]	; (80052bc <__libc_init_array+0x44>)
 8005292:	1b64      	subs	r4, r4, r5
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	42a6      	cmp	r6, r4
 8005298:	d105      	bne.n	80052a6 <__libc_init_array+0x2e>
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	f855 3b04 	ldr.w	r3, [r5], #4
 80052a0:	4798      	blx	r3
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7ee      	b.n	8005284 <__libc_init_array+0xc>
 80052a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052aa:	4798      	blx	r3
 80052ac:	3601      	adds	r6, #1
 80052ae:	e7f2      	b.n	8005296 <__libc_init_array+0x1e>
 80052b0:	08005f08 	.word	0x08005f08
 80052b4:	08005f08 	.word	0x08005f08
 80052b8:	08005f08 	.word	0x08005f08
 80052bc:	08005f0c 	.word	0x08005f0c

080052c0 <malloc>:
 80052c0:	4b02      	ldr	r3, [pc, #8]	; (80052cc <malloc+0xc>)
 80052c2:	4601      	mov	r1, r0
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	f000 b87b 	b.w	80053c0 <_malloc_r>
 80052ca:	bf00      	nop
 80052cc:	20000020 	.word	0x20000020

080052d0 <free>:
 80052d0:	4b02      	ldr	r3, [pc, #8]	; (80052dc <free+0xc>)
 80052d2:	4601      	mov	r1, r0
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	f000 b80b 	b.w	80052f0 <_free_r>
 80052da:	bf00      	nop
 80052dc:	20000020 	.word	0x20000020

080052e0 <memset>:
 80052e0:	4603      	mov	r3, r0
 80052e2:	4402      	add	r2, r0
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d100      	bne.n	80052ea <memset+0xa>
 80052e8:	4770      	bx	lr
 80052ea:	f803 1b01 	strb.w	r1, [r3], #1
 80052ee:	e7f9      	b.n	80052e4 <memset+0x4>

080052f0 <_free_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4605      	mov	r5, r0
 80052f4:	2900      	cmp	r1, #0
 80052f6:	d040      	beq.n	800537a <_free_r+0x8a>
 80052f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fc:	1f0c      	subs	r4, r1, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfb8      	it	lt
 8005302:	18e4      	addlt	r4, r4, r3
 8005304:	f000 f92c 	bl	8005560 <__malloc_lock>
 8005308:	4a1c      	ldr	r2, [pc, #112]	; (800537c <_free_r+0x8c>)
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	b933      	cbnz	r3, 800531c <_free_r+0x2c>
 800530e:	6063      	str	r3, [r4, #4]
 8005310:	6014      	str	r4, [r2, #0]
 8005312:	4628      	mov	r0, r5
 8005314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005318:	f000 b928 	b.w	800556c <__malloc_unlock>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d908      	bls.n	8005332 <_free_r+0x42>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	1821      	adds	r1, r4, r0
 8005324:	428b      	cmp	r3, r1
 8005326:	bf01      	itttt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	1809      	addeq	r1, r1, r0
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	e7ed      	b.n	800530e <_free_r+0x1e>
 8005332:	461a      	mov	r2, r3
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b10b      	cbz	r3, 800533c <_free_r+0x4c>
 8005338:	42a3      	cmp	r3, r4
 800533a:	d9fa      	bls.n	8005332 <_free_r+0x42>
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	1850      	adds	r0, r2, r1
 8005340:	42a0      	cmp	r0, r4
 8005342:	d10b      	bne.n	800535c <_free_r+0x6c>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	4401      	add	r1, r0
 8005348:	1850      	adds	r0, r2, r1
 800534a:	4283      	cmp	r3, r0
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	d1e0      	bne.n	8005312 <_free_r+0x22>
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4401      	add	r1, r0
 8005356:	6011      	str	r1, [r2, #0]
 8005358:	6053      	str	r3, [r2, #4]
 800535a:	e7da      	b.n	8005312 <_free_r+0x22>
 800535c:	d902      	bls.n	8005364 <_free_r+0x74>
 800535e:	230c      	movs	r3, #12
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	e7d6      	b.n	8005312 <_free_r+0x22>
 8005364:	6820      	ldr	r0, [r4, #0]
 8005366:	1821      	adds	r1, r4, r0
 8005368:	428b      	cmp	r3, r1
 800536a:	bf01      	itttt	eq
 800536c:	6819      	ldreq	r1, [r3, #0]
 800536e:	685b      	ldreq	r3, [r3, #4]
 8005370:	1809      	addeq	r1, r1, r0
 8005372:	6021      	streq	r1, [r4, #0]
 8005374:	6063      	str	r3, [r4, #4]
 8005376:	6054      	str	r4, [r2, #4]
 8005378:	e7cb      	b.n	8005312 <_free_r+0x22>
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	200006d8 	.word	0x200006d8

08005380 <sbrk_aligned>:
 8005380:	b570      	push	{r4, r5, r6, lr}
 8005382:	4e0e      	ldr	r6, [pc, #56]	; (80053bc <sbrk_aligned+0x3c>)
 8005384:	460c      	mov	r4, r1
 8005386:	6831      	ldr	r1, [r6, #0]
 8005388:	4605      	mov	r5, r0
 800538a:	b911      	cbnz	r1, 8005392 <sbrk_aligned+0x12>
 800538c:	f000 f88c 	bl	80054a8 <_sbrk_r>
 8005390:	6030      	str	r0, [r6, #0]
 8005392:	4621      	mov	r1, r4
 8005394:	4628      	mov	r0, r5
 8005396:	f000 f887 	bl	80054a8 <_sbrk_r>
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	d00a      	beq.n	80053b4 <sbrk_aligned+0x34>
 800539e:	1cc4      	adds	r4, r0, #3
 80053a0:	f024 0403 	bic.w	r4, r4, #3
 80053a4:	42a0      	cmp	r0, r4
 80053a6:	d007      	beq.n	80053b8 <sbrk_aligned+0x38>
 80053a8:	1a21      	subs	r1, r4, r0
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f87c 	bl	80054a8 <_sbrk_r>
 80053b0:	3001      	adds	r0, #1
 80053b2:	d101      	bne.n	80053b8 <sbrk_aligned+0x38>
 80053b4:	f04f 34ff 	mov.w	r4, #4294967295
 80053b8:	4620      	mov	r0, r4
 80053ba:	bd70      	pop	{r4, r5, r6, pc}
 80053bc:	200006dc 	.word	0x200006dc

080053c0 <_malloc_r>:
 80053c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c4:	1ccd      	adds	r5, r1, #3
 80053c6:	f025 0503 	bic.w	r5, r5, #3
 80053ca:	3508      	adds	r5, #8
 80053cc:	2d0c      	cmp	r5, #12
 80053ce:	bf38      	it	cc
 80053d0:	250c      	movcc	r5, #12
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	4607      	mov	r7, r0
 80053d6:	db01      	blt.n	80053dc <_malloc_r+0x1c>
 80053d8:	42a9      	cmp	r1, r5
 80053da:	d905      	bls.n	80053e8 <_malloc_r+0x28>
 80053dc:	230c      	movs	r3, #12
 80053de:	2600      	movs	r6, #0
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	4630      	mov	r0, r6
 80053e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e8:	4e2e      	ldr	r6, [pc, #184]	; (80054a4 <_malloc_r+0xe4>)
 80053ea:	f000 f8b9 	bl	8005560 <__malloc_lock>
 80053ee:	6833      	ldr	r3, [r6, #0]
 80053f0:	461c      	mov	r4, r3
 80053f2:	bb34      	cbnz	r4, 8005442 <_malloc_r+0x82>
 80053f4:	4629      	mov	r1, r5
 80053f6:	4638      	mov	r0, r7
 80053f8:	f7ff ffc2 	bl	8005380 <sbrk_aligned>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	4604      	mov	r4, r0
 8005400:	d14d      	bne.n	800549e <_malloc_r+0xde>
 8005402:	6834      	ldr	r4, [r6, #0]
 8005404:	4626      	mov	r6, r4
 8005406:	2e00      	cmp	r6, #0
 8005408:	d140      	bne.n	800548c <_malloc_r+0xcc>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	4631      	mov	r1, r6
 800540e:	4638      	mov	r0, r7
 8005410:	eb04 0803 	add.w	r8, r4, r3
 8005414:	f000 f848 	bl	80054a8 <_sbrk_r>
 8005418:	4580      	cmp	r8, r0
 800541a:	d13a      	bne.n	8005492 <_malloc_r+0xd2>
 800541c:	6821      	ldr	r1, [r4, #0]
 800541e:	3503      	adds	r5, #3
 8005420:	1a6d      	subs	r5, r5, r1
 8005422:	f025 0503 	bic.w	r5, r5, #3
 8005426:	3508      	adds	r5, #8
 8005428:	2d0c      	cmp	r5, #12
 800542a:	bf38      	it	cc
 800542c:	250c      	movcc	r5, #12
 800542e:	4638      	mov	r0, r7
 8005430:	4629      	mov	r1, r5
 8005432:	f7ff ffa5 	bl	8005380 <sbrk_aligned>
 8005436:	3001      	adds	r0, #1
 8005438:	d02b      	beq.n	8005492 <_malloc_r+0xd2>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	442b      	add	r3, r5
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	e00e      	b.n	8005460 <_malloc_r+0xa0>
 8005442:	6822      	ldr	r2, [r4, #0]
 8005444:	1b52      	subs	r2, r2, r5
 8005446:	d41e      	bmi.n	8005486 <_malloc_r+0xc6>
 8005448:	2a0b      	cmp	r2, #11
 800544a:	d916      	bls.n	800547a <_malloc_r+0xba>
 800544c:	1961      	adds	r1, r4, r5
 800544e:	42a3      	cmp	r3, r4
 8005450:	6025      	str	r5, [r4, #0]
 8005452:	bf18      	it	ne
 8005454:	6059      	strne	r1, [r3, #4]
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	bf08      	it	eq
 800545a:	6031      	streq	r1, [r6, #0]
 800545c:	5162      	str	r2, [r4, r5]
 800545e:	604b      	str	r3, [r1, #4]
 8005460:	4638      	mov	r0, r7
 8005462:	f104 060b 	add.w	r6, r4, #11
 8005466:	f000 f881 	bl	800556c <__malloc_unlock>
 800546a:	f026 0607 	bic.w	r6, r6, #7
 800546e:	1d23      	adds	r3, r4, #4
 8005470:	1af2      	subs	r2, r6, r3
 8005472:	d0b6      	beq.n	80053e2 <_malloc_r+0x22>
 8005474:	1b9b      	subs	r3, r3, r6
 8005476:	50a3      	str	r3, [r4, r2]
 8005478:	e7b3      	b.n	80053e2 <_malloc_r+0x22>
 800547a:	6862      	ldr	r2, [r4, #4]
 800547c:	42a3      	cmp	r3, r4
 800547e:	bf0c      	ite	eq
 8005480:	6032      	streq	r2, [r6, #0]
 8005482:	605a      	strne	r2, [r3, #4]
 8005484:	e7ec      	b.n	8005460 <_malloc_r+0xa0>
 8005486:	4623      	mov	r3, r4
 8005488:	6864      	ldr	r4, [r4, #4]
 800548a:	e7b2      	b.n	80053f2 <_malloc_r+0x32>
 800548c:	4634      	mov	r4, r6
 800548e:	6876      	ldr	r6, [r6, #4]
 8005490:	e7b9      	b.n	8005406 <_malloc_r+0x46>
 8005492:	230c      	movs	r3, #12
 8005494:	4638      	mov	r0, r7
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	f000 f868 	bl	800556c <__malloc_unlock>
 800549c:	e7a1      	b.n	80053e2 <_malloc_r+0x22>
 800549e:	6025      	str	r5, [r4, #0]
 80054a0:	e7de      	b.n	8005460 <_malloc_r+0xa0>
 80054a2:	bf00      	nop
 80054a4:	200006d8 	.word	0x200006d8

080054a8 <_sbrk_r>:
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	2300      	movs	r3, #0
 80054ac:	4d05      	ldr	r5, [pc, #20]	; (80054c4 <_sbrk_r+0x1c>)
 80054ae:	4604      	mov	r4, r0
 80054b0:	4608      	mov	r0, r1
 80054b2:	602b      	str	r3, [r5, #0]
 80054b4:	f7fc fb96 	bl	8001be4 <_sbrk>
 80054b8:	1c43      	adds	r3, r0, #1
 80054ba:	d102      	bne.n	80054c2 <_sbrk_r+0x1a>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	b103      	cbz	r3, 80054c2 <_sbrk_r+0x1a>
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	bd38      	pop	{r3, r4, r5, pc}
 80054c4:	200006e0 	.word	0x200006e0

080054c8 <_raise_r>:
 80054c8:	291f      	cmp	r1, #31
 80054ca:	b538      	push	{r3, r4, r5, lr}
 80054cc:	4604      	mov	r4, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	d904      	bls.n	80054dc <_raise_r+0x14>
 80054d2:	2316      	movs	r3, #22
 80054d4:	6003      	str	r3, [r0, #0]
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80054de:	b112      	cbz	r2, 80054e6 <_raise_r+0x1e>
 80054e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054e4:	b94b      	cbnz	r3, 80054fa <_raise_r+0x32>
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 f830 	bl	800554c <_getpid_r>
 80054ec:	462a      	mov	r2, r5
 80054ee:	4601      	mov	r1, r0
 80054f0:	4620      	mov	r0, r4
 80054f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f6:	f000 b817 	b.w	8005528 <_kill_r>
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d00a      	beq.n	8005514 <_raise_r+0x4c>
 80054fe:	1c59      	adds	r1, r3, #1
 8005500:	d103      	bne.n	800550a <_raise_r+0x42>
 8005502:	2316      	movs	r3, #22
 8005504:	6003      	str	r3, [r0, #0]
 8005506:	2001      	movs	r0, #1
 8005508:	e7e7      	b.n	80054da <_raise_r+0x12>
 800550a:	2400      	movs	r4, #0
 800550c:	4628      	mov	r0, r5
 800550e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005512:	4798      	blx	r3
 8005514:	2000      	movs	r0, #0
 8005516:	e7e0      	b.n	80054da <_raise_r+0x12>

08005518 <raise>:
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <raise+0xc>)
 800551a:	4601      	mov	r1, r0
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	f7ff bfd3 	b.w	80054c8 <_raise_r>
 8005522:	bf00      	nop
 8005524:	20000020 	.word	0x20000020

08005528 <_kill_r>:
 8005528:	b538      	push	{r3, r4, r5, lr}
 800552a:	2300      	movs	r3, #0
 800552c:	4d06      	ldr	r5, [pc, #24]	; (8005548 <_kill_r+0x20>)
 800552e:	4604      	mov	r4, r0
 8005530:	4608      	mov	r0, r1
 8005532:	4611      	mov	r1, r2
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	f7fc fb3a 	bl	8001bae <_kill>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	d102      	bne.n	8005544 <_kill_r+0x1c>
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	b103      	cbz	r3, 8005544 <_kill_r+0x1c>
 8005542:	6023      	str	r3, [r4, #0]
 8005544:	bd38      	pop	{r3, r4, r5, pc}
 8005546:	bf00      	nop
 8005548:	200006e0 	.word	0x200006e0

0800554c <_getpid_r>:
 800554c:	f7fc bb28 	b.w	8001ba0 <_getpid>

08005550 <strcpy>:
 8005550:	4603      	mov	r3, r0
 8005552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005556:	f803 2b01 	strb.w	r2, [r3], #1
 800555a:	2a00      	cmp	r2, #0
 800555c:	d1f9      	bne.n	8005552 <strcpy+0x2>
 800555e:	4770      	bx	lr

08005560 <__malloc_lock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_lock+0x8>)
 8005562:	f000 b809 	b.w	8005578 <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	200006e4 	.word	0x200006e4

0800556c <__malloc_unlock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_unlock+0x8>)
 800556e:	f000 b804 	b.w	800557a <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	200006e4 	.word	0x200006e4

08005578 <__retarget_lock_acquire_recursive>:
 8005578:	4770      	bx	lr

0800557a <__retarget_lock_release_recursive>:
 800557a:	4770      	bx	lr

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
